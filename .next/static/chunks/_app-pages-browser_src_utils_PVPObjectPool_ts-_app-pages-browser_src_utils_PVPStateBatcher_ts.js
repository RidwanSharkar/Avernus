"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_utils_PVPObjectPool_ts-_app-pages-browser_src_utils_PVPStateBatcher_ts"],{

/***/ "(app-pages-browser)/./src/utils/PVPObjectPool.ts":
/*!************************************!*\
  !*** ./src/utils/PVPObjectPool.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PVPObjectPool: function() { return /* binding */ PVPObjectPool; },\n/* harmony export */   pvpObjectPool: function() { return /* binding */ pvpObjectPool; }\n/* harmony export */ });\n/* harmony import */ var _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/three-exports */ \"(app-pages-browser)/./src/utils/three-exports.ts\");\n/* harmony import */ var _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/ObjectPool */ \"(app-pages-browser)/./src/utils/ObjectPool.ts\");\n// PVP Object Pool for performance optimization in multiplayer scenarios\n\n\n/**\n * Centralized object pooling system for PVP components\n * Reduces garbage collection pressure by reusing frequently created objects\n */ class PVPObjectPool {\n    static getInstance() {\n        if (!PVPObjectPool.instance) {\n            PVPObjectPool.instance = new PVPObjectPool();\n        }\n        return PVPObjectPool.instance;\n    }\n    /**\n   * Get a Vector3 from the pool\n   * Remember to call releaseVector3 when done\n   */ acquireVector3() {\n        let x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        const vector = this.vector3Pool.acquire();\n        vector.set(x, y, z);\n        return vector;\n    }\n    /**\n   * Return a Vector3 to the pool\n   */ releaseVector3(vector) {\n        this.vector3Pool.release(vector);\n    }\n    /**\n   * Get a temporary Vector3 for single-frame calculations\n   * These are automatically reset each frame, don't need to release\n   */ getTempVector3() {\n        let x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        const index = this.tempVectorIndex % this.tempVector3s.length;\n        this.tempVectorIndex++;\n        const vector = this.tempVector3s[index];\n        vector.set(x, y, z);\n        return vector;\n    }\n    /**\n   * Get a Quaternion from the pool\n   */ acquireQuaternion() {\n        let x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, w = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n        const quaternion = this.quaternionPool.acquire();\n        quaternion.set(x, y, z, w);\n        return quaternion;\n    }\n    /**\n   * Return a Quaternion to the pool\n   */ releaseQuaternion(quaternion) {\n        this.quaternionPool.release(quaternion);\n    }\n    /**\n   * Get a temporary Quaternion for single-frame calculations\n   */ getTempQuaternion() {\n        let x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, w = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n        const index = this.tempQuaternionIndex % this.tempQuaternions.length;\n        this.tempQuaternionIndex++;\n        const quaternion = this.tempQuaternions[index];\n        quaternion.set(x, y, z, w);\n        return quaternion;\n    }\n    /**\n   * Create a hit key for collision tracking\n   */ createHitKey(entityId, playerId) {\n        return \"\".concat(entityId, \"-\").concat(playerId);\n    }\n    /**\n   * Get an effect data object from the pool\n   */ acquireEffectData() {\n        return this.effectDataPool.acquire();\n    }\n    /**\n   * Return an effect data object to the pool\n   */ releaseEffectData(effectData) {\n        this.effectDataPool.release(effectData);\n    }\n    /**\n   * Reset temporary object indices (call once per frame)\n   */ resetFrameTemporaries() {\n        this.tempVectorIndex = 0;\n        this.tempQuaternionIndex = 0;\n    }\n    /**\n   * Get pool statistics for debugging\n   */ getStats() {\n        return {\n            vector3Pool: this.vector3Pool.getPoolSize(),\n            quaternionPool: this.quaternionPool.getPoolSize(),\n            hitKeyPool: this.hitKeyPool.getPoolSize(),\n            effectDataPool: this.effectDataPool.getPoolSize(),\n            tempVector3sUsed: this.tempVectorIndex,\n            tempQuaternionsUsed: this.tempQuaternionIndex\n        };\n    }\n    /**\n   * Clear all pools (useful for cleanup)\n   */ clearAll() {\n        this.vector3Pool.clear();\n        this.quaternionPool.clear();\n        this.hitKeyPool.clear();\n        this.effectDataPool.clear();\n        this.resetFrameTemporaries();\n    }\n    constructor(){\n        // Temporary objects for calculations (reused within single frame)\n        this.tempVector3s = [];\n        this.tempQuaternions = [];\n        this.tempVectorIndex = 0;\n        this.tempQuaternionIndex = 0;\n        // Initialize Vector3 pool\n        this.vector3Pool = new _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_1__.ObjectPool(()=>new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(), (vector)=>vector.set(0, 0, 0), 50 // Pool size for PVP scenarios\n        );\n        // Initialize Quaternion pool\n        this.quaternionPool = new _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_1__.ObjectPool(()=>new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Quaternion(), (quaternion)=>quaternion.set(0, 0, 0, 1), 20);\n        // Initialize hit key pool (for collision tracking)\n        this.hitKeyPool = new _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_1__.ObjectPool(()=>\"\", (key)=>\"\", 100);\n        // Initialize effect data pool\n        this.effectDataPool = new _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_1__.ObjectPool(()=>({\n                id: 0,\n                playerId: \"\",\n                position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(),\n                startTime: 0,\n                duration: 0,\n                debuffType: undefined\n            }), (effectData)=>{\n            effectData.id = 0;\n            effectData.playerId = \"\";\n            effectData.position.set(0, 0, 0);\n            effectData.startTime = 0;\n            effectData.duration = 0;\n            effectData.debuffType = undefined;\n        }, 30);\n        // Pre-allocate temporary objects for frame calculations\n        for(let i = 0; i < 10; i++){\n            this.tempVector3s.push(new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n            this.tempQuaternions.push(new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Quaternion());\n        }\n    }\n}\n// Export singleton instance for easy access\nconst pvpObjectPool = PVPObjectPool.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/PVPObjectPool.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/utils/PVPStateBatcher.ts":
/*!**************************************!*\
  !*** ./src/utils/PVPStateBatcher.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PVPStateBatcher: function() { return /* binding */ PVPStateBatcher; },\n/* harmony export */   PVPStateUpdateHelpers: function() { return /* binding */ PVPStateUpdateHelpers; },\n/* harmony export */   pvpStateBatcher: function() { return /* binding */ pvpStateBatcher; }\n/* harmony export */ });\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n// PVP State Batching Utility for Performance Optimization\n\n/**\n * Batches multiple React state updates to prevent unnecessary re-renders\n * Particularly important for PVP scenarios with frequent state changes\n */ class PVPStateBatcher {\n    static getInstance() {\n        if (!PVPStateBatcher.instance) {\n            PVPStateBatcher.instance = new PVPStateBatcher();\n        }\n        return PVPStateBatcher.instance;\n    }\n    /**\n   * Add a state update to the batch queue\n   */ batchUpdate(updateFn) {\n        this.pendingUpdates.push(updateFn);\n        if (!this.batchScheduled) {\n            this.scheduleBatch();\n        }\n    }\n    /**\n   * Schedule a batch to be executed on the next frame\n   */ scheduleBatch() {\n        this.batchScheduled = true;\n        // Use requestAnimationFrame to batch updates at the end of the frame\n        this.frameId = requestAnimationFrame(()=>{\n            this.executeBatch();\n        });\n    }\n    /**\n   * Execute all pending state updates in a single batch\n   */ executeBatch() {\n        if (this.pendingUpdates.length === 0) {\n            this.batchScheduled = false;\n            return;\n        }\n        const updates = [\n            ...this.pendingUpdates\n        ];\n        this.pendingUpdates = [];\n        this.batchScheduled = false;\n        // Track performance metrics\n        this.batchCount++;\n        this.totalUpdatesInBatch += updates.length;\n        this.lastBatchTime = performance.now();\n        // Execute all updates in a single React batch\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_0__.unstable_batchedUpdates)(()=>{\n            updates.forEach((update)=>{\n                try {\n                    update();\n                } catch (error) {\n                    console.error(\"Error in batched state update:\", error);\n                }\n            });\n        });\n    }\n    /**\n   * Force execute any pending batches immediately\n   */ flushBatch() {\n        if (this.frameId) {\n            cancelAnimationFrame(this.frameId);\n            this.frameId = null;\n        }\n        this.executeBatch();\n    }\n    /**\n   * Get performance statistics\n   */ getStats() {\n        const avgUpdatesPerBatch = this.batchCount > 0 ? this.totalUpdatesInBatch / this.batchCount : 0;\n        return {\n            totalBatches: this.batchCount,\n            totalUpdates: this.totalUpdatesInBatch,\n            avgUpdatesPerBatch: Math.round(avgUpdatesPerBatch * 100) / 100,\n            pendingUpdates: this.pendingUpdates.length,\n            lastBatchTime: this.lastBatchTime,\n            batchScheduled: this.batchScheduled\n        };\n    }\n    /**\n   * Reset performance statistics\n   */ resetStats() {\n        this.batchCount = 0;\n        this.totalUpdatesInBatch = 0;\n        this.lastBatchTime = 0;\n    }\n    /**\n   * Clear all pending updates (useful for cleanup)\n   */ clear() {\n        if (this.frameId) {\n            cancelAnimationFrame(this.frameId);\n            this.frameId = null;\n        }\n        this.pendingUpdates = [];\n        this.batchScheduled = false;\n    }\n    constructor(){\n        // Pending state updates to batch\n        this.pendingUpdates = [];\n        this.batchScheduled = false;\n        this.frameId = null;\n        // Performance tracking\n        this.batchCount = 0;\n        this.totalUpdatesInBatch = 0;\n        this.lastBatchTime = 0;\n    }\n}\n// Export singleton instance\nconst pvpStateBatcher = PVPStateBatcher.getInstance();\n/**\n * Utility functions for common PVP state update patterns\n */ class PVPStateUpdateHelpers {\n    /**\n   * Batch multiple player state updates\n   */ static batchPlayerStateUpdates(setMultiplayerPlayerStates, updates) {\n        pvpStateBatcher.batchUpdate(()=>{\n            setMultiplayerPlayerStates((prev)=>{\n                const updated = new Map(prev);\n                updates.forEach((param)=>{\n                    let { playerId, stateUpdate } = param;\n                    const currentState = updated.get(playerId) || {\n                        isCharging: false,\n                        chargeProgress: 0,\n                        isSwinging: false,\n                        swordComboStep: 1,\n                        isDivineStorming: false,\n                        isSpinning: false,\n                        isSwordCharging: false,\n                        isDeflecting: false,\n                        isViperStingCharging: false,\n                        viperStingChargeProgress: 0,\n                        isBarrageCharging: false,\n                        barrageChargeProgress: 0,\n                        isCobraShotCharging: false,\n                        cobraShotChargeProgress: 0,\n                        isSkyfalling: false,\n                        isBackstabbing: false\n                    };\n                    updated.set(playerId, {\n                        ...currentState,\n                        ...stateUpdate,\n                        lastAnimationUpdate: Date.now()\n                    });\n                });\n                return updated;\n            });\n        });\n    }\n    /**\n   * Batch effect state updates (venom, debuff, etc.)\n   */ static batchEffectUpdates(updates) {\n        // Group updates by setter to minimize state update calls\n        const updatesBySetter = new Map();\n        updates.forEach((update)=>{\n            if (!updatesBySetter.has(update.setter)) {\n                updatesBySetter.set(update.setter, []);\n            }\n            updatesBySetter.get(update.setter).push(update);\n        });\n        // Batch all updates\n        pvpStateBatcher.batchUpdate(()=>{\n            updatesBySetter.forEach((setterUpdates, setter)=>{\n                setter((prev)=>{\n                    let newState = [\n                        ...prev\n                    ];\n                    setterUpdates.forEach((update)=>{\n                        if (update.type === \"add\" && update.data) {\n                            newState.push(update.data);\n                        } else if (update.type === \"remove\" && update.filterId !== undefined) {\n                            newState = newState.filter((effect)=>effect.id !== update.filterId);\n                        }\n                    });\n                    return newState;\n                });\n            });\n        });\n    }\n    /**\n   * Batch game state updates (position, weapon state, etc.)\n   */ static batchGameStateUpdates(updates) {\n        pvpStateBatcher.batchUpdate(()=>{\n            updates.forEach((param)=>{\n                let { setter, value } = param;\n                setter(value);\n            });\n        });\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/PVPStateBatcher.ts\n"));

/***/ })

}]);