"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_utils_EnemyFactory_ts"],{

/***/ "(app-pages-browser)/./src/utils/EnemyFactory.ts":
/*!***********************************!*\
  !*** ./src/utils/EnemyFactory.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnemyFactory: function() { return /* binding */ EnemyFactory; }\n/* harmony export */ });\n/* harmony import */ var _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/three-exports */ \"(app-pages-browser)/./src/utils/three-exports.ts\");\n/* harmony import */ var _ecs_components_Transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/ecs/components/Transform */ \"(app-pages-browser)/./src/ecs/components/Transform.ts\");\n/* harmony import */ var _ecs_components_Health__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/ecs/components/Health */ \"(app-pages-browser)/./src/ecs/components/Health.ts\");\n/* harmony import */ var _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/ecs/components/Enemy */ \"(app-pages-browser)/./src/ecs/components/Enemy.ts\");\n/* harmony import */ var _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/ecs/components/Collider */ \"(app-pages-browser)/./src/ecs/components/Collider.ts\");\n/* harmony import */ var _ecs_components_Renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/ecs/components/Renderer */ \"(app-pages-browser)/./src/ecs/components/Renderer.ts\");\n/* harmony import */ var _ecs_components_HealthBar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/ecs/components/HealthBar */ \"(app-pages-browser)/./src/ecs/components/HealthBar.ts\");\n/* harmony import */ var _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils/ObjectPool */ \"(app-pages-browser)/./src/utils/ObjectPool.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);\n// Enemy factory for creating and managing enemy entities efficiently\n\n\n\n\n\n\n\n\n\nclass EnemyFactory {\n    initializePools() {\n        if (!this.config.enableObjectPooling) return;\n        this.meshPool = new _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_7__.ObjectPool(()=>new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Mesh(), (mesh)=>{\n            mesh.geometry = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(1, 1, 1);\n            mesh.material = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial();\n            mesh.position.set(0, 0, 0);\n            mesh.rotation.set(0, 0, 0);\n            mesh.scale.set(1, 1, 1);\n            mesh.visible = true;\n            mesh.castShadow = true;\n            mesh.receiveShadow = true;\n        }, this.config.maxPoolSize);\n        this.geometryPool = new _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_7__.ObjectPool(()=>new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(1, 1, 1), (geometry)=>{\n        // Geometries don't need reset\n        }, this.config.maxPoolSize);\n        this.materialPool = new _utils_ObjectPool__WEBPACK_IMPORTED_MODULE_7__.ObjectPool(()=>new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial(), (material)=>{\n            material.color.setHex(0xffffff);\n            material.opacity = 1;\n            material.transparent = false;\n            material.wireframe = false;\n        }, this.config.maxPoolSize);\n    }\n    initializeEnemyConfigs() {\n        this.enemyConfigs = new Map([\n            [\n                _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.DUMMY,\n                {\n                    baseHealth: 500,\n                    size: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 2, 1),\n                    color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0x8B4513),\n                    colliderRadius: 1.0 // Increased from 0.6 for easier hitting\n                }\n            ],\n            [\n                _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.GRUNT,\n                {\n                    baseHealth: 500,\n                    size: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(0.8, 1.8, 0.8),\n                    color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0xFF4444),\n                    colliderRadius: 2 // Increased from 0.5 for easier hitting\n                }\n            ],\n            [\n                _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.ELITE,\n                {\n                    baseHealth: 1000,\n                    size: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(1.2, 2.2, 1.2),\n                    color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0x4444FF),\n                    colliderRadius: 2 // Increased from 0.7 for easier hitting\n                }\n            ],\n            [\n                _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.BOSS,\n                {\n                    baseHealth: 2000,\n                    size: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(2, 3, 2),\n                    color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0x8A2BE2),\n                    colliderRadius: 2 // Increased from 1.2 for easier hitting\n                }\n            ]\n        ]);\n    }\n    createEnemy(spawnConfig) {\n        const entity = this.world.createEntity();\n        const config = this.enemyConfigs.get(spawnConfig.type);\n        const level = spawnConfig.level || 1;\n        const scale = spawnConfig.scale || 1;\n        // Add Transform component\n        const transform = this.world.createComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_1__.Transform);\n        transform.position.copy(spawnConfig.position);\n        transform.setScale(scale, scale, scale);\n        entity.addComponent(transform);\n        // Add Enemy component\n        const enemy = this.world.createComponent(_ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.Enemy);\n        enemy.type = spawnConfig.type;\n        enemy.level = level;\n        entity.addComponent(enemy);\n        // Add Health component\n        const health = this.world.createComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_2__.Health);\n        const maxHealth = spawnConfig.health || config.baseHealth * level;\n        health.maxHealth = maxHealth;\n        health.currentHealth = maxHealth;\n        // Configure health based on enemy type\n        if (spawnConfig.type === _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.DUMMY) {\n            // Safety check for object pooling issues\n            if (typeof health.enableRegeneration === \"function\") {\n                health.enableRegeneration(10, 2); // Fast regeneration for training dummy\n            } else {\n                // Fallback: manually set regeneration properties\n                health.canRegenerate = true;\n                health.regenerationRate = 10;\n                health.regenerationDelay = 2;\n            }\n        }\n        entity.addComponent(health);\n        // Add Collider component\n        const collider = this.world.createComponent(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_4__.Collider);\n        collider.type = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_4__.ColliderType.SPHERE;\n        collider.radius = config.colliderRadius * scale;\n        collider.layer = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_4__.CollisionLayer.ENEMY;\n        collider.setOffset(0, config.size.y * scale * 0.5, 0); // Center on entity\n        entity.addComponent(collider);\n        // Add Renderer component\n        const renderer = this.world.createComponent(_ecs_components_Renderer__WEBPACK_IMPORTED_MODULE_5__.Renderer);\n        // Use custom renderer for Elite and Boss enemies, and standard mesh for Grunt\n        if (spawnConfig.type === _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.ELITE || spawnConfig.type === _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.BOSS) {\n            // For Elite and Boss enemies, we don't create a mesh here\n            // The EliteEnemyManager and BossEnemyManager will handle the rendering via React Three Fiber\n            renderer.mesh = null;\n            // Ensure no geometry/material is set to prevent RenderSystem from creating a mesh\n            renderer.geometry = null;\n            renderer.material = null;\n        } else if (spawnConfig.type === _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.GRUNT) {\n            // For Grunt enemies, we don't create a mesh here\n            // The GruntEnemyManager will handle the React Three Fiber rendering\n            renderer.mesh = null;\n            // Ensure no geometry/material is set to prevent RenderSystem from creating a mesh\n            renderer.geometry = null;\n            renderer.material = null;\n        } else {\n            // Use standard mesh for other enemy types (like DUMMY)\n            renderer.mesh = this.createEnemyMesh(config, spawnConfig.color || config.color, scale);\n        }\n        if (typeof renderer.setCastShadow === \"function\") {\n            renderer.setCastShadow(true);\n        }\n        if (typeof renderer.setReceiveShadow === \"function\") {\n            renderer.setReceiveShadow(true);\n        }\n        entity.addComponent(renderer);\n        // Add HealthBar component if enabled\n        if (this.config.enableHealthBars) {\n            const healthBar = this.world.createComponent(_ecs_components_HealthBar__WEBPACK_IMPORTED_MODULE_6__.HealthBar);\n            const healthBarConfig = {\n                width: Math.max(0.8, config.size.x * scale * 0.8),\n                height: 0.08,\n                offset: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, config.size.y * scale + 1.25, 0),\n                showWhenFull: spawnConfig.type === _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.DUMMY,\n                fadeDistance: 15,\n                ...this.config.healthBarConfig\n            };\n            // Configure health bar colors based on enemy type\n            if (spawnConfig.type === _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.DUMMY) {\n                healthBarConfig.healthColor = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0x00AAFF); // Blue for training dummy\n            }\n            // Apply configuration to healthBar\n            healthBar.width = healthBarConfig.width || healthBar.width;\n            healthBar.height = healthBarConfig.height || healthBar.height;\n            if (healthBarConfig.offset) healthBar.offset.copy(healthBarConfig.offset);\n            healthBar.showWhenFull = healthBarConfig.showWhenFull !== undefined ? healthBarConfig.showWhenFull : healthBar.showWhenFull;\n            healthBar.fadeDistance = healthBarConfig.fadeDistance || healthBar.fadeDistance;\n            if (healthBarConfig.healthColor) healthBar.healthColor.copy(healthBarConfig.healthColor);\n            entity.addComponent(healthBar);\n        }\n        // Notify systems that the entity is ready\n        this.world.notifyEntityAdded(entity);\n        return entity;\n    }\n    createEnemyMesh(config, color, scale) {\n        let geometry;\n        let material;\n        let mesh;\n        if (this.config.enableObjectPooling) {\n            // Use pooled objects\n            geometry = this.geometryPool.acquire();\n            material = this.materialPool.acquire();\n            mesh = this.meshPool.acquire();\n            // Configure geometry\n            geometry.dispose(); // Dispose old geometry\n            geometry = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(config.size.x * scale, config.size.y * scale, config.size.z * scale);\n        } else {\n            // Create new objects\n            geometry = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(config.size.x * scale, config.size.y * scale, config.size.z * scale);\n            material = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial();\n            mesh = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Mesh();\n        }\n        // Configure material\n        material.color.copy(color);\n        material.roughness = 0.7;\n        material.metalness = 0.1;\n        // Configure mesh\n        mesh.geometry = geometry;\n        mesh.material = material;\n        mesh.castShadow = true;\n        mesh.receiveShadow = true;\n        // Add enemy identification for collision detection\n        mesh.name = \"enemy\";\n        mesh.userData.isEnemy = true;\n        // Position mesh so bottom is at transform position\n        mesh.position.y = config.size.y * scale / 2;\n        return mesh;\n    }\n    createEliteEnemyGroup(entityId) {\n        // Create a placeholder group that will be populated by the React component\n        const group = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Group();\n        group.name = \"elite-enemy\";\n        group.userData.isEnemy = true;\n        group.userData.entityId = entityId;\n        // The actual Elite model will be rendered by the EliteEnemyRenderer React component\n        // This group serves as a placeholder and container for the React-rendered content\n        return group;\n    }\n    createTrainingDummy(position) {\n        return this.createEnemy({\n            type: _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.DUMMY,\n            level: 1,\n            position: position.clone(),\n            health: 500,\n            color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0x8B4513) // Brown\n        });\n    }\n    createGrunt(position) {\n        let level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        return this.createEnemy({\n            type: _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.GRUNT,\n            level,\n            position: position.clone(),\n            color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0xFF4444) // Red\n        });\n    }\n    createElite(position) {\n        let level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        return this.createEnemy({\n            type: _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.ELITE,\n            level,\n            position: position.clone(),\n            color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0x4444FF) // Blue\n        });\n    }\n    createBoss(position) {\n        let level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        return this.createEnemy({\n            type: _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.BOSS,\n            level,\n            position: position.clone(),\n            color: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Color(0x8A2BE2) // Purple\n        });\n    }\n    spawnEnemiesInCircle(center, radius, count) {\n        let enemyType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.GRUNT, level = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1;\n        const enemies = [];\n        const angleStep = Math.PI * 2 / count;\n        for(let i = 0; i < count; i++){\n            const angle = i * angleStep;\n            const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(center.x + Math.cos(angle) * radius, center.y, center.z + Math.sin(angle) * radius);\n            const enemy = this.createEnemy({\n                type: enemyType,\n                level,\n                position\n            });\n            enemies.push(enemy);\n        }\n        return enemies;\n    }\n    spawnEnemiesInArea(center, size, count) {\n        let enemyType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : _ecs_components_Enemy__WEBPACK_IMPORTED_MODULE_3__.EnemyType.GRUNT, level = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1;\n        const enemies = [];\n        for(let i = 0; i < count; i++){\n            const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Vector3(center.x + (Math.random() - 0.5) * size.x, center.y, center.z + (Math.random() - 0.5) * size.z);\n            const enemy = this.createEnemy({\n                type: enemyType,\n                level,\n                position\n            });\n            enemies.push(enemy);\n        }\n        return enemies;\n    }\n    releaseEnemy(entity) {\n        if (!this.config.enableObjectPooling) return;\n        const renderer = entity.getComponent(_ecs_components_Renderer__WEBPACK_IMPORTED_MODULE_5__.Renderer);\n        if (renderer && renderer.mesh) {\n            const meshOrGroup = renderer.mesh;\n            // Only handle pooling for regular meshes, not Groups (Elite enemies)\n            if (meshOrGroup instanceof _utils_three_exports__WEBPACK_IMPORTED_MODULE_0__.Mesh) {\n                // Return objects to pools\n                if (meshOrGroup.geometry && this.geometryPool) {\n                    this.geometryPool.release(meshOrGroup.geometry);\n                }\n                if (meshOrGroup.material && this.materialPool) {\n                    this.materialPool.release(meshOrGroup.material);\n                }\n                if (this.meshPool) {\n                    this.meshPool.release(meshOrGroup);\n                }\n            }\n        // Groups (Elite enemies) are handled by their React components and don't use object pooling\n        }\n    }\n    getPoolStats() {\n        if (!this.config.enableObjectPooling) return null;\n        return {\n            meshPool: this.meshPool.getPoolSize(),\n            geometryPool: this.geometryPool.getPoolSize(),\n            materialPool: this.materialPool.getPoolSize()\n        };\n    }\n    dispose() {\n        if (this.config.enableObjectPooling) {\n            var _this_meshPool, _this_geometryPool, _this_materialPool;\n            (_this_meshPool = this.meshPool) === null || _this_meshPool === void 0 ? void 0 : _this_meshPool.clear();\n            (_this_geometryPool = this.geometryPool) === null || _this_geometryPool === void 0 ? void 0 : _this_geometryPool.clear();\n            (_this_materialPool = this.materialPool) === null || _this_materialPool === void 0 ? void 0 : _this_materialPool.clear();\n        }\n    }\n    constructor(world, config = {}){\n        this.world = world;\n        this.config = {\n            enableObjectPooling: config.enableObjectPooling !== false,\n            maxPoolSize: config.maxPoolSize || 50,\n            enableHealthBars: config.enableHealthBars !== false,\n            healthBarConfig: config.healthBarConfig || {}\n        };\n        // Initialize object pools\n        this.initializePools();\n        // Initialize enemy configurations\n        this.initializeEnemyConfigs();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/EnemyFactory.ts\n"));

/***/ })

}]);