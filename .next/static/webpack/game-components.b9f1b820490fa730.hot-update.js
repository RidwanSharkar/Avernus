"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("game-components",{

/***/ "(app-pages-browser)/./src/components/PVPGameScene.tsx":
/*!*****************************************!*\
  !*** ./src/components/PVPGameScene.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PVPGameScene: function() { return /* binding */ PVPGameScene; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! __barrel_optimize__?names=useFrame,useThree!=!@react-three/fiber */ \"(app-pages-browser)/./node_modules/@react-three/fiber/dist/events-776716bd.esm.js\");\n/* harmony import */ var _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/three-exports */ \"(app-pages-browser)/./src/utils/three-exports.ts\");\n/* harmony import */ var _dragon_DragonRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dragon/DragonRenderer */ \"(app-pages-browser)/./src/components/dragon/DragonRenderer.tsx\");\n/* harmony import */ var _contexts_MultiplayerContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/contexts/MultiplayerContext */ \"(app-pages-browser)/./src/contexts/MultiplayerContext.tsx\");\n/* harmony import */ var _core_Engine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/core/Engine */ \"(app-pages-browser)/./src/core/Engine.ts\");\n/* harmony import */ var _ecs_World__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/ecs/World */ \"(app-pages-browser)/./src/ecs/World.ts\");\n/* harmony import */ var _ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/ecs/components/Transform */ \"(app-pages-browser)/./src/ecs/components/Transform.ts\");\n/* harmony import */ var _ecs_components_Movement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/ecs/components/Movement */ \"(app-pages-browser)/./src/ecs/components/Movement.ts\");\n/* harmony import */ var _ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/ecs/components/Health */ \"(app-pages-browser)/./src/ecs/components/Health.ts\");\n/* harmony import */ var _ecs_components_Shield__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/ecs/components/Shield */ \"(app-pages-browser)/./src/ecs/components/Shield.ts\");\n/* harmony import */ var _ecs_components_Renderer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/ecs/components/Renderer */ \"(app-pages-browser)/./src/ecs/components/Renderer.ts\");\n/* harmony import */ var _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/ecs/components/Collider */ \"(app-pages-browser)/./src/ecs/components/Collider.ts\");\n/* harmony import */ var _ecs_components_Tower__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/ecs/components/Tower */ \"(app-pages-browser)/./src/ecs/components/Tower.ts\");\n/* harmony import */ var _ecs_components_SummonedUnit__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/ecs/components/SummonedUnit */ \"(app-pages-browser)/./src/ecs/components/SummonedUnit.ts\");\n/* harmony import */ var _ecs_components_Interpolation__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @/ecs/components/Interpolation */ \"(app-pages-browser)/./src/ecs/components/Interpolation.ts\");\n/* harmony import */ var _systems_RenderSystem__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @/systems/RenderSystem */ \"(app-pages-browser)/./src/systems/RenderSystem.ts\");\n/* harmony import */ var _systems_ControlSystem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @/systems/ControlSystem */ \"(app-pages-browser)/./src/systems/ControlSystem.ts\");\n/* harmony import */ var _systems_CameraSystem__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @/systems/CameraSystem */ \"(app-pages-browser)/./src/systems/CameraSystem.ts\");\n/* harmony import */ var _systems_ProjectileSystem__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @/systems/ProjectileSystem */ \"(app-pages-browser)/./src/systems/ProjectileSystem.ts\");\n/* harmony import */ var _systems_PhysicsSystem__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @/systems/PhysicsSystem */ \"(app-pages-browser)/./src/systems/PhysicsSystem.ts\");\n/* harmony import */ var _systems_CollisionSystem__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @/systems/CollisionSystem */ \"(app-pages-browser)/./src/systems/CollisionSystem.ts\");\n/* harmony import */ var _systems_CombatSystem__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @/systems/CombatSystem */ \"(app-pages-browser)/./src/systems/CombatSystem.ts\");\n/* harmony import */ var _systems_TowerSystem__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @/systems/TowerSystem */ \"(app-pages-browser)/./src/systems/TowerSystem.ts\");\n/* harmony import */ var _systems_SummonedUnitSystem__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @/systems/SummonedUnitSystem */ \"(app-pages-browser)/./src/systems/SummonedUnitSystem.ts\");\n/* harmony import */ var _systems_InterpolationSystem__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @/systems/InterpolationSystem */ \"(app-pages-browser)/./src/systems/InterpolationSystem.ts\");\n/* harmony import */ var _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @/components/dragon/weapons */ \"(app-pages-browser)/./src/components/dragon/weapons.ts\");\n/* harmony import */ var _components_weapons_Smite__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @/components/weapons/Smite */ \"(app-pages-browser)/./src/components/weapons/Smite.tsx\");\n/* harmony import */ var _components_weapons_DeathGraspProjectile__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @/components/weapons/DeathGraspProjectile */ \"(app-pages-browser)/./src/components/weapons/DeathGraspProjectile.tsx\");\n/* harmony import */ var _components_weapons_DeathGraspPull__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @/components/weapons/DeathGraspPull */ \"(app-pages-browser)/./src/components/weapons/DeathGraspPull.tsx\");\n/* harmony import */ var _components_managers_UnifiedProjectileManager__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @/components/managers/UnifiedProjectileManager */ \"(app-pages-browser)/./src/components/managers/UnifiedProjectileManager.tsx\");\n/* harmony import */ var _components_projectiles_BowPowershotManager__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @/components/projectiles/BowPowershotManager */ \"(app-pages-browser)/./src/components/projectiles/BowPowershotManager.tsx\");\n/* harmony import */ var _components_weapons_FrostNovaManager__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @/components/weapons/FrostNovaManager */ \"(app-pages-browser)/./src/components/weapons/FrostNovaManager.tsx\");\n/* harmony import */ var _components_weapons_StunManager__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @/components/weapons/StunManager */ \"(app-pages-browser)/./src/components/weapons/StunManager.tsx\");\n/* harmony import */ var _components_weapons_FrostNova__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @/components/weapons/FrostNova */ \"(app-pages-browser)/./src/components/weapons/FrostNova.tsx\");\n/* harmony import */ var _components_projectiles_CobraShotManager__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @/components/projectiles/CobraShotManager */ \"(app-pages-browser)/./src/components/projectiles/CobraShotManager.tsx\");\n/* harmony import */ var _components_projectiles_VenomEffect__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @/components/projectiles/VenomEffect */ \"(app-pages-browser)/./src/components/projectiles/VenomEffect.tsx\");\n/* harmony import */ var _components_ui_DebuffIndicator__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @/components/ui/DebuffIndicator */ \"(app-pages-browser)/./src/components/ui/DebuffIndicator.tsx\");\n/* harmony import */ var _components_weapons_FrozenEffect__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @/components/weapons/FrozenEffect */ \"(app-pages-browser)/./src/components/weapons/FrozenEffect.tsx\");\n/* harmony import */ var _components_weapons_StunnedEffect__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @/components/weapons/StunnedEffect */ \"(app-pages-browser)/./src/components/weapons/StunnedEffect.tsx\");\n/* harmony import */ var _components_pvp_OptimizedPVPManagers__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @/components/pvp/OptimizedPVPManagers */ \"(app-pages-browser)/./src/components/pvp/OptimizedPVPManagers.tsx\");\n/* harmony import */ var _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @/utils/PVPObjectPool */ \"(app-pages-browser)/./src/utils/PVPObjectPool.ts\");\n/* harmony import */ var _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @/utils/PVPStateBatcher */ \"(app-pages-browser)/./src/utils/PVPStateBatcher.ts\");\n/* harmony import */ var _components_weapons_DivineStormManager__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @/components/weapons/DivineStormManager */ \"(app-pages-browser)/./src/components/weapons/DivineStormManager.tsx\");\n/* harmony import */ var _components_weapons_DeflectShieldManager__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @/components/weapons/DeflectShieldManager */ \"(app-pages-browser)/./src/components/weapons/DeflectShieldManager.tsx\");\n/* harmony import */ var _components_ui_PlayerHealthBar__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @/components/ui/PlayerHealthBar */ \"(app-pages-browser)/./src/components/ui/PlayerHealthBar.tsx\");\n/* harmony import */ var _components_towers_TowerRenderer__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @/components/towers/TowerRenderer */ \"(app-pages-browser)/./src/components/towers/TowerRenderer.tsx\");\n/* harmony import */ var _components_SummonedUnitRenderer__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @/components/SummonedUnitRenderer */ \"(app-pages-browser)/./src/components/SummonedUnitRenderer.tsx\");\n/* harmony import */ var _core_DamageCalculator__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @/core/DamageCalculator */ \"(app-pages-browser)/./src/core/DamageCalculator.ts\");\n/* harmony import */ var _components_environment_Environment__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @/components/environment/Environment */ \"(app-pages-browser)/./src/components/environment/Environment.tsx\");\n/* harmony import */ var _components_projectiles_useBowPowershot__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @/components/projectiles/useBowPowershot */ \"(app-pages-browser)/./src/components/projectiles/useBowPowershot.ts\");\n/* harmony import */ var _components_projectiles_ViperStingManager__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @/components/projectiles/ViperStingManager */ \"(app-pages-browser)/./src/components/projectiles/ViperStingManager.tsx\");\n/* harmony import */ var _components_projectiles_BarrageManager__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @/components/projectiles/BarrageManager */ \"(app-pages-browser)/./src/components/projectiles/BarrageManager.tsx\");\n/* harmony import */ var _utils_ExperienceSystem__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @/utils/ExperienceSystem */ \"(app-pages-browser)/./src/utils/ExperienceSystem.ts\");\n/* __next_internal_client_entry_do_not_use__ PVPGameScene auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n// Import our ECS systems\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// PVP Reanimate Effect Component (standalone healing effect)\nconst PVPReanimateEffect = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().memo(_s((param)=>{\n    let { position, onComplete } = param;\n    _s();\n    const [time, setTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const duration = 1.5;\n    (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_54__.F)((_, delta)=>{\n        setTime((prev)=>{\n            const newTime = prev + delta;\n            if (newTime >= duration) {\n                onComplete();\n            }\n            return newTime;\n        });\n    });\n    const progress = time / duration;\n    const opacity = Math.sin(progress * Math.PI);\n    const scale = 1 + progress * 2;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"group\", {\n        position: position.toArray(),\n        children: [\n            [\n                ...Array(3)\n            ].map((_, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                    position: [\n                        0,\n                        progress * 2 + i * 0.5,\n                        0\n                    ],\n                    rotation: [\n                        Math.PI / 2,\n                        0,\n                        time * 2\n                    ],\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"torusGeometry\", {\n                            args: [\n                                0.8 - i * 0.2,\n                                0.05,\n                                16,\n                                32\n                            ]\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 139,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meshStandardMaterial\", {\n                            color: \"#60FF38\",\n                            emissive: \"#60FF38\",\n                            emissiveIntensity: 1.5,\n                            transparent: true,\n                            opacity: opacity * (1 - i * 0.2)\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 140,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, \"ring-\".concat(i), true, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 134,\n                    columnNumber: 9\n                }, undefined)),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                scale: [\n                    scale,\n                    scale,\n                    scale\n                ],\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"sphereGeometry\", {\n                        args: [\n                            0.5,\n                            32,\n                            32\n                        ]\n                    }, void 0, false, {\n                        fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                        lineNumber: 152,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meshStandardMaterial\", {\n                        color: \"#60FF38\",\n                        emissive: \"#60FF38\",\n                        emissiveIntensity: 2,\n                        transparent: true,\n                        opacity: opacity * 0.3\n                    }, void 0, false, {\n                        fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                        lineNumber: 153,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                lineNumber: 151,\n                columnNumber: 7\n            }, undefined),\n            [\n                ...Array(12)\n            ].map((_, i)=>{\n                const angle = i / 12 * Math.PI * 2;\n                const radius = 0.75 + progress;\n                const yOffset = progress * 2;\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                    position: [\n                        Math.cos(angle + time * 2) * radius / 1.1,\n                        yOffset + Math.sin(time * 3 + i) * 0.5,\n                        Math.sin(angle + time * 2) * radius / 1.1\n                    ],\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"sphereGeometry\", {\n                            args: [\n                                0.095,\n                                8,\n                                8\n                            ]\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 177,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meshStandardMaterial\", {\n                            color: \"#60FF38\",\n                            emissive: \"#60FF38\",\n                            emissiveIntensity: 2.5,\n                            transparent: true,\n                            opacity: opacity * 0.8\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 178,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, \"particle-\".concat(i), true, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 169,\n                    columnNumber: 11\n                }, undefined);\n            }),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pointLight\", {\n                color: \"#60FF38\",\n                intensity: 2 * opacity,\n                distance: 5,\n                decay: 2\n            }, void 0, false, {\n                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                lineNumber: 190,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n        lineNumber: 131,\n        columnNumber: 5\n    }, undefined);\n}, \"wROh5MC9V94AyK3Z3hVMBmb0q9Q=\", false, function() {\n    return [\n        _barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_54__.F\n    ];\n}));\n_c = PVPReanimateEffect;\nPVPReanimateEffect.displayName = \"PVPReanimateEffect\";\nfunction PVPGameScene() {\n    let { onDamageNumbersUpdate, onDamageNumberComplete, onCameraUpdate, onGameStateUpdate, onControlSystemUpdate, onExperienceUpdate } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    var _engineRef_current, _controlSystemRef_current, _controlSystemRef_current1;\n    _s1();\n    const { scene, camera, gl, size } = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_54__.D)();\n    const { players, towers, gameStarted, isInRoom, updatePlayerPosition, updatePlayerWeapon, updatePlayerHealth, broadcastPlayerAttack, broadcastPlayerAbility, broadcastPlayerAnimationState, broadcastPlayerDamage, broadcastPlayerEffect, broadcastPlayerDebuff, damageTower, socket } = (0,_contexts_MultiplayerContext__WEBPACK_IMPORTED_MODULE_4__.useMultiplayer)();\n    const engineRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const playerEntityRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const controlSystemRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const towerSystemRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const summonedUnitSystemRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const reanimateRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const isInitialized = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const lastAnimationBroadcast = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const [playerPosition, setPlayerPosition] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0.5, 0));\n    const [playerEntity, setPlayerEntity] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Create a ref for the Viper Sting manager that includes position and rotation\n    const viperStingParentRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0.5, 0),\n        quaternion: {\n            x: 0,\n            y: 0,\n            z: 0,\n            w: 1\n        }\n    });\n    // Track server player to local ECS entity mapping for PVP damage\n    const serverPlayerEntities = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Track server tower to local ECS entity mapping\n    const serverTowerEntities = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Track server summoned unit to local ECS entity mapping\n    const serverSummonedUnitEntities = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Experience system state\n    const [playerExperience, setPlayerExperience] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [playerLevel, setPlayerLevel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    // Mana system state for weapons\n    const [currentMana, setCurrentMana] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(150);\n    const [maxMana, setMaxMana] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(150);\n    // Track current weapon for mana management\n    const [currentWeapon, setCurrentWeapon] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.BOW);\n    // PVP Reanimate Effect Management\n    const [pvpReanimateEffects, setPvpReanimateEffects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const nextReanimateEffectId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // PVP Smite Effect Management\n    const [pvpSmiteEffects, setPvpSmiteEffects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const nextSmiteEffectId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // PVP DeathGrasp Effect Management\n    const [pvpDeathGraspEffects, setPvpDeathGraspEffects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const nextDeathGraspEffectId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // PVP DeathGrasp Pull Management\n    const [pvpDeathGraspPulls, setPvpDeathGraspPulls] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const nextDeathGraspPullId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // PVP Venom Effect Management\n    const [pvpVenomEffects, setPvpVenomEffects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const nextVenomEffectId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // PVP Debuff Management\n    const [pvpDebuffEffects, setPvpDebuffEffects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const nextDebuffEffectId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // PVP Frost Nova Effect Management\n    const [pvpFrostNovaEffects, setPvpFrostNovaEffects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const nextFrostNovaEffectId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // Function to create venom effect on PVP players\n    // Function to create debuff effect on PVP players\n    const createPvpDebuffEffect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(playerId, debuffType, position) {\n        let duration = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 5000;\n        // Debug: Check if this is the local player\n        const isLocalPlayer = playerId === (socket === null || socket === void 0 ? void 0 : socket.id);\n        const debuffEffect = {\n            id: nextDebuffEffectId.current++,\n            playerId,\n            debuffType,\n            position: position.clone(),\n            startTime: Date.now(),\n            duration\n        };\n        // Use batched updates for debuff effects\n        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n            {\n                type: \"add\",\n                effectType: \"debuff\",\n                setter: setPvpDebuffEffects,\n                data: debuffEffect\n            }\n        ]);\n        // Apply the debuff to the local player's movement if this is targeting us\n        if (isLocalPlayer && playerEntity) {\n            const playerMovement = playerEntity.getComponent(_ecs_components_Movement__WEBPACK_IMPORTED_MODULE_8__.Movement);\n            if (playerMovement) {\n                if (debuffType === \"frozen\") {\n                    playerMovement.freeze(duration);\n                } else if (debuffType === \"slowed\") {\n                    playerMovement.slow(duration, 0.5); // 50% speed reduction\n                } else if (debuffType === \"stunned\") {\n                    playerMovement.freeze(duration); // Stun uses same movement restriction as freeze\n                }\n            }\n        }\n        // Clean up debuff effect after duration using batched updates\n        setTimeout(()=>{\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n                {\n                    type: \"remove\",\n                    effectType: \"debuff\",\n                    setter: setPvpDebuffEffects,\n                    filterId: debuffEffect.id\n                }\n            ]);\n        }, debuffEffect.duration);\n    }, [\n        socket === null || socket === void 0 ? void 0 : socket.id,\n        playerEntity\n    ]);\n    // Function to create frozen effect on PVP players (called by PVPFrostNovaManager)\n    const createPvpFrozenEffect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((playerId, position)=>{\n        // Debug: Check if this is the local player\n        const isLocalPlayer = playerId === (socket === null || socket === void 0 ? void 0 : socket.id);\n        // Create the frozen debuff effect (3 second freeze)\n        createPvpDebuffEffect(playerId, \"frozen\", position, 5000);\n        // Broadcast debuff effect to all players so they can see it\n        if (broadcastPlayerDebuff) {\n            broadcastPlayerDebuff(playerId, \"frozen\", 5000, {\n                position: {\n                    x: position.x,\n                    y: position.y,\n                    z: position.z\n                }\n            });\n        }\n    }, [\n        createPvpDebuffEffect,\n        broadcastPlayerDebuff\n    ]);\n    // Function to create reanimate effect on PVP players\n    const createPvpReanimateEffect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((playerId, position)=>{\n        const reanimateEffect = {\n            id: nextReanimateEffectId.current++,\n            playerId,\n            position: position.clone(),\n            startTime: Date.now(),\n            duration: 1500 // 1.5 seconds reanimate duration (matches Reanimate component)\n        };\n        // Use batched updates for reanimate effects\n        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n            {\n                type: \"add\",\n                effectType: \"reanimate\",\n                setter: setPvpReanimateEffects,\n                data: reanimateEffect\n            }\n        ]);\n        // Clean up reanimate effect after duration using batched updates\n        setTimeout(()=>{\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n                {\n                    type: \"remove\",\n                    effectType: \"reanimate\",\n                    setter: setPvpReanimateEffects,\n                    filterId: reanimateEffect.id\n                }\n            ]);\n        }, reanimateEffect.duration);\n    }, []);\n    // Function to create smite effect on PVP players\n    const createPvpSmiteEffect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((playerId, position, onDamageDealt)=>{\n        const smiteEffect = {\n            id: nextSmiteEffectId.current++,\n            playerId,\n            position: position.clone(),\n            startTime: Date.now(),\n            duration: 900,\n            onDamageDealt: onDamageDealt // Include healing callback\n        };\n        // Use batched updates for smite effects\n        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n            {\n                type: \"add\",\n                effectType: \"smite\",\n                setter: setPvpSmiteEffects,\n                data: smiteEffect\n            }\n        ]);\n        // Clean up smite effect after duration using batched updates\n        setTimeout(()=>{\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n                {\n                    type: \"remove\",\n                    effectType: \"smite\",\n                    setter: setPvpSmiteEffects,\n                    filterId: smiteEffect.id\n                }\n            ]);\n        }, smiteEffect.duration);\n    }, []);\n    // Function to create death grasp effect on PVP players\n    const createPvpDeathGraspEffect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((playerId, startPosition, direction)=>{\n        const deathGraspEffect = {\n            id: nextDeathGraspEffectId.current++,\n            playerId,\n            startPosition: startPosition.clone(),\n            direction: direction.clone(),\n            startTime: Date.now(),\n            duration: 1200,\n            pullTriggered: false\n        };\n        // Use batched updates for death grasp effects\n        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n            {\n                type: \"add\",\n                effectType: \"deathgrasp\",\n                setter: setPvpDeathGraspEffects,\n                data: deathGraspEffect\n            }\n        ]);\n        // Clean up death grasp effect after duration using batched updates\n        setTimeout(()=>{\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n                {\n                    type: \"remove\",\n                    effectType: \"deathgrasp\",\n                    setter: setPvpDeathGraspEffects,\n                    filterId: deathGraspEffect.id\n                }\n            ]);\n        }, deathGraspEffect.duration);\n    }, []);\n    // Function to create death grasp pull effect on PVP players\n    const createPvpDeathGraspPull = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((targetPlayerId, casterPosition)=>{\n        console.log(\"\\uD83C\\uDFA3 Creating DeathGraspPull effect for target \".concat(targetPlayerId, \" from position:\"), casterPosition);\n        const deathGraspPull = {\n            id: nextDeathGraspPullId.current++,\n            targetPlayerId,\n            casterPosition: casterPosition.clone(),\n            startTime: Date.now(),\n            duration: 600,\n            isActive: true\n        };\n        console.log(\"\\uD83C\\uDFA3 DeathGraspPull created with ID \".concat(deathGraspPull.id));\n        // Use batched updates for death grasp pulls\n        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n            {\n                type: \"add\",\n                effectType: \"deathgrasp\",\n                setter: setPvpDeathGraspPulls,\n                data: deathGraspPull\n            }\n        ]);\n        // Clean up death grasp pull after duration using batched updates\n        setTimeout(()=>{\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n                {\n                    type: \"remove\",\n                    effectType: \"deathgrasp\",\n                    setter: setPvpDeathGraspPulls,\n                    filterId: deathGraspPull.id\n                }\n            ]);\n        }, deathGraspPull.duration);\n    }, []);\n    // Function to create frost nova effect on PVP players\n    const createPvpFrostNovaEffect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((playerId, position)=>{\n        const frostNovaEffect = {\n            id: nextFrostNovaEffectId.current++,\n            playerId,\n            position: position.clone(),\n            startTime: Date.now(),\n            duration: 1200 // 1.2 seconds frost nova duration (matches FrostNovaManager)\n        };\n        // Use batched updates for frost nova effects\n        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n            {\n                type: \"add\",\n                effectType: \"frostNova\",\n                setter: setPvpFrostNovaEffects,\n                data: frostNovaEffect\n            }\n        ]);\n        // Clean up frost nova effect after duration using batched updates\n        setTimeout(()=>{\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n                {\n                    type: \"remove\",\n                    effectType: \"frostNova\",\n                    setter: setPvpFrostNovaEffects,\n                    filterId: frostNovaEffect.id\n                }\n            ]);\n        }, frostNovaEffect.duration);\n    }, []);\n    const createPvpVenomEffect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((playerId, position)=>{\n        // Debug: Check if this is the local player\n        const isLocalPlayer = playerId === (socket === null || socket === void 0 ? void 0 : socket.id);\n        // SAFETY CHECK: Don't create venom effects on the local player\n        if (isLocalPlayer) {\n            return;\n        }\n        const venomEffect = {\n            id: nextVenomEffectId.current++,\n            playerId,\n            position: position.clone(),\n            startTime: Date.now(),\n            duration: 6000 // 6 seconds venom duration\n        };\n        // Use batched updates for venom effects\n        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n            {\n                type: \"add\",\n                effectType: \"venom\",\n                setter: setPvpVenomEffects,\n                data: venomEffect\n            }\n        ]);\n        // Apply DoT damage over time\n        const venomDamagePerSecond = 17;\n        const tickInterval = 1000; // 1 second per tick\n        let tickCount = 0;\n        const maxTicks = 6; // 6 seconds total\n        const venomInterval = setInterval(()=>{\n            tickCount++;\n            if (tickCount > maxTicks) {\n                clearInterval(venomInterval);\n                return;\n            }\n            // Apply venom damage\n            if (broadcastPlayerDamage) {\n                broadcastPlayerDamage(playerId, venomDamagePerSecond);\n            }\n        }, tickInterval);\n        // Clean up venom effect after duration using batched updates\n        setTimeout(()=>{\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchEffectUpdates([\n                {\n                    type: \"remove\",\n                    effectType: \"venom\",\n                    setter: setPvpVenomEffects,\n                    filterId: venomEffect.id\n                }\n            ]);\n        }, venomEffect.duration);\n    }, [\n        socket === null || socket === void 0 ? void 0 : socket.id,\n        broadcastPlayerDamage\n    ]);\n    // Function to handle wave completion and award experience\n    const handleWaveComplete = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        console.log(\"\\uD83C\\uDF0A Wave completed! Awarding 10 EXP to both players\");\n        // Award 10 EXP to BOTH players when a wave completes\n        const allPlayerIds = Array.from(players.keys());\n        allPlayerIds.forEach((playerId)=>{\n            if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                // Local player gets the experience\n                setPlayerExperience((prev)=>{\n                    const newExp = prev + 10;\n                    // Check for level up\n                    const newLevel = _utils_ExperienceSystem__WEBPACK_IMPORTED_MODULE_53__.ExperienceSystem.getLevelFromExperience(newExp);\n                    if (newLevel > playerLevel) {\n                        setPlayerLevel(newLevel);\n                        console.log(\"\\uD83C\\uDF89 Level up! Player reached level \".concat(newLevel));\n                        // Update max health based on new level\n                        if (playerEntity) {\n                            const health = playerEntity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                            if (health) {\n                                const newMaxHealth = _utils_ExperienceSystem__WEBPACK_IMPORTED_MODULE_53__.ExperienceSystem.getMaxHealthForLevel(newLevel);\n                                const oldMaxHealth = health.maxHealth;\n                                // Update max health and scale current health proportionally\n                                health.setMaxHealth(newMaxHealth);\n                                // Synchronize the updated health with server and other players\n                                updatePlayerHealth(health.currentHealth, health.maxHealth);\n                                console.log(\"\\uD83D\\uDC9A Health updated: \".concat(oldMaxHealth, \" -> \").concat(newMaxHealth, \" HP (current: \").concat(health.currentHealth, \"/\").concat(health.maxHealth, \")\"));\n                            }\n                        }\n                    }\n                    console.log(\"\\uD83C\\uDFAF Local player \".concat(playerId, \" gained 10 EXP from wave completion (total: \").concat(newExp, \")\"));\n                    return newExp;\n                });\n            } else {\n                // Update opponent's experience (will be handled by server in real implementation)\n                console.log(\"\\uD83C\\uDFAF Opponent \".concat(playerId, \" gained 10 EXP from wave completion\"));\n            }\n        });\n    }, [\n        socket === null || socket === void 0 ? void 0 : socket.id,\n        playerLevel,\n        playerEntity,\n        players\n    ]);\n    // Notify parent component of experience updates\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        if (onExperienceUpdate) {\n            onExperienceUpdate(playerExperience, playerLevel);\n        }\n    }, [\n        playerExperience,\n        playerLevel,\n        onExperienceUpdate\n    ]);\n    const [weaponState, setWeaponState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        currentWeapon: _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.BOW,\n        currentSubclass: _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponSubclass.ELEMENTAL,\n        isCharging: false,\n        chargeProgress: 0,\n        isSwinging: false,\n        isSpinning: false,\n        swordComboStep: 1,\n        isDivineStorming: false,\n        isSwordCharging: false,\n        isDeflecting: false,\n        isViperStingCharging: false,\n        viperStingChargeProgress: 0,\n        isBarrageCharging: false,\n        barrageChargeProgress: 0,\n        isCobraShotCharging: false,\n        cobraShotChargeProgress: 0,\n        isSkyfalling: false,\n        isBackstabbing: false,\n        isSundering: false\n    });\n    // Track previous weapon state for change detection\n    const prevWeaponRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        weapon: _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.BOW,\n        subclass: _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponSubclass.ELEMENTAL\n    });\n    // Track multiplayer player states for animations\n    const [multiplayerPlayerStates, setMultiplayerPlayerStates] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    // Perfect shot system\n    const { createPowershotEffect } = (0,_components_projectiles_useBowPowershot__WEBPACK_IMPORTED_MODULE_50__.useBowPowershot)();\n    // Optimized PVP effects with object pooling\n    const { createOptimizedVenomEffect, createOptimizedDebuffEffect, getPoolStats } = (0,_components_pvp_OptimizedPVPManagers__WEBPACK_IMPORTED_MODULE_40__.useOptimizedPVPEffects)();\n    // Mana regeneration for weapons that use mana (Scythe and Runeblade)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE || currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.RUNEBLADE) {\n            const regenRate = currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE ? 5 : 4; // 10 mana/s for Scythe, 8 mana/s for Runeblade\n            const interval = setInterval(()=>{\n                setCurrentMana((prev)=>Math.min(maxMana, prev + regenRate));\n            }, 500);\n            return ()=>clearInterval(interval);\n        }\n    }, [\n        currentWeapon,\n        maxMana\n    ]);\n    // Sync currentWeapon with weaponState\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setCurrentWeapon(weaponState.currentWeapon);\n    }, [\n        weaponState.currentWeapon\n    ]);\n    // Weapon switching - set max mana and reset current mana based on weapon type\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let newMaxMana = 0;\n        if (currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE) {\n            newMaxMana = 250;\n        } else if (currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.RUNEBLADE) {\n            newMaxMana = 150;\n        }\n        if (newMaxMana > 0) {\n            setMaxMana(newMaxMana);\n            setCurrentMana(newMaxMana); // Start with full mana when switching\n        }\n    }, [\n        currentWeapon\n    ]);\n    // Function to consume mana for weapon abilities (Scythe and Runeblade)\n    const consumeMana = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((amount)=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: consumeMana called - currentWeapon:\", currentWeapon, \"amount:\", amount);\n        if (currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE || currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.RUNEBLADE) {\n            setCurrentMana((prev)=>{\n                const newValue = Math.max(0, prev - amount);\n                console.log(\"\\uD83D\\uDD0D DEBUG: consumeMana - old mana:\", prev, \"new mana:\", newValue);\n                return newValue;\n            });\n        }\n    }, [\n        currentWeapon\n    ]);\n    // Function to check if current weapon has enough mana\n    const hasMana = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((amount)=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: hasMana called - currentMana:\", currentMana, \"amount:\", amount);\n        const result = currentMana >= amount;\n        console.log(\"\\uD83D\\uDD0D DEBUG: hasMana result:\", result);\n        return result;\n    }, [\n        currentMana\n    ]);\n    // Set up PVP event listeners for player actions and damage\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!socket) return;\n        const handlePlayerAttack = (data)=>{\n            if (data.playerId !== socket.id && engineRef.current) {\n                var _data_animationData;\n                // Handle perfect shot beam effects\n                if (data.attackType === \"bow_release\" && ((_data_animationData = data.animationData) === null || _data_animationData === void 0 ? void 0 : _data_animationData.isPerfectShot)) {\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    // Get the player's subclass from the players map\n                    const player = players.get(data.playerId);\n                    const subclass = (player === null || player === void 0 ? void 0 : player.subclass) || _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponSubclass.ELEMENTAL;\n                    // Create perfect shot beam effect\n                    createPowershotEffect(position, direction, subclass, true, true // isElementalShotsUnlocked\n                    );\n                }\n                // Handle special ability projectiles that need custom visual effects\n                if (data.attackType === \"viper_sting_projectile\") {\n                    // Skip processing our own viper sting projectiles to prevent self-damage\n                    if (data.playerId === socket.id) {\n                        return;\n                    }\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    // Create the ECS projectile for damage\n                    const projectileSystem = engineRef.current.getWorld().getSystem(_systems_ProjectileSystem__WEBPACK_IMPORTED_MODULE_19__.ProjectileSystem);\n                    if (projectileSystem) {\n                        const attackerEntityId = serverPlayerEntities.current.get(data.playerId) || -Math.abs(data.playerId.length * 1000 + Date.now() % 1000);\n                        // Create Viper Sting projectile for damage\n                        projectileSystem.createProjectile(engineRef.current.getWorld(), position, direction, attackerEntityId, {\n                            speed: 16,\n                            damage: 61,\n                            lifetime: 5,\n                            piercing: true,\n                            opacity: 0.8,\n                            projectileType: \"viper_sting\"\n                        });\n                    }\n                    // Trigger visual effect for Viper Sting projectile\n                    const { triggerGlobalViperSting } = __webpack_require__(/*! @/components/projectiles/ViperStingManager */ \"(app-pages-browser)/./src/components/projectiles/ViperStingManager.tsx\");\n                    // Update the Viper Sting parent ref to the other player's position for visual effect\n                    const originalPosition = viperStingParentRef.current.position.clone();\n                    const originalQuaternion = {\n                        ...viperStingParentRef.current.quaternion\n                    };\n                    // Temporarily set the parent ref to the other player's position and direction\n                    viperStingParentRef.current.position.copy(position);\n                    // Calculate quaternion from the other player's direction\n                    const angle = Math.atan2(direction.x, direction.z);\n                    viperStingParentRef.current.quaternion = {\n                        x: 0,\n                        y: Math.sin(angle / 2),\n                        z: 0,\n                        w: Math.cos(angle / 2)\n                    };\n                    // Trigger the Viper Sting visual effect\n                    triggerGlobalViperSting();\n                    // Restore original parent ref position and rotation\n                    setTimeout(()=>{\n                        viperStingParentRef.current.position.copy(originalPosition);\n                        viperStingParentRef.current.quaternion = originalQuaternion;\n                    }, 100);\n                    return;\n                }\n                if (data.attackType === \"cobra_shot_projectile\") {\n                    // Note: Cobra Shot damage is handled by PVPCobraShotManager through visual projectiles\n                    // No need to create ECS projectiles that show up as regular arrows\n                    // Trigger visual effect for Cobra Shot projectile (this creates the visual projectile that PVPCobraShotManager monitors)\n                    const { triggerGlobalCobraShot } = __webpack_require__(/*! @/components/projectiles/CobraShotManager */ \"(app-pages-browser)/./src/components/projectiles/CobraShotManager.tsx\");\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    triggerGlobalCobraShot(position, direction);\n                    return;\n                }\n                // Handle sword charge hit attacks\n                if (data.attackType === \"sword_charge_hit\") {\n                    // Validate animationData object exists and has required properties\n                    if (!data.animationData || typeof data.animationData.damage !== \"number\" || typeof data.animationData.targetId !== \"number\") {\n                        return;\n                    }\n                    // Check if this hit targets the local player\n                    const targetEntityId = serverPlayerEntities.current.get((socket === null || socket === void 0 ? void 0 : socket.id) || \"\");\n                    if (targetEntityId === data.animationData.targetId) {\n                        // Apply damage directly to local player\n                        if (playerEntity && broadcastPlayerDamage && (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                            const health = playerEntity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                            if (health) {\n                                // Apply damage through PVP system\n                                broadcastPlayerDamage(socket.id, data.animationData.damage);\n                            }\n                        }\n                    }\n                    return; // Don't process as regular projectile\n                }\n                // Handle regular projectile attacks - create projectiles that can hit the local player\n                const projectileTypes = [\n                    \"regular_arrow\",\n                    \"charged_arrow\",\n                    \"entropic_bolt\",\n                    \"crossentropy_bolt\",\n                    \"perfect_shot\",\n                    \"barrage_projectile\"\n                ];\n                if (projectileTypes.includes(data.attackType)) {\n                    // Create a projectile that can damage the local player\n                    const projectileSystem = engineRef.current.getWorld().getSystem(_systems_ProjectileSystem__WEBPACK_IMPORTED_MODULE_19__.ProjectileSystem);\n                    if (projectileSystem) {\n                        // Use pooled Vector3 objects for better performance\n                        const position = _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__.pvpObjectPool.acquireVector3(data.position.x, data.position.y, data.position.z);\n                        const direction = _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__.pvpObjectPool.acquireVector3(data.direction.x, data.direction.y, data.direction.z);\n                        // Get the attacker's local ECS entity ID (if it exists) or use a unique negative ID\n                        const attackerEntityId = serverPlayerEntities.current.get(data.playerId) || -Math.abs(data.playerId.length * 1000 + Date.now() % 1000);\n                        // Create appropriate projectile type with PVP damage enabled\n                        switch(data.attackType){\n                            case \"regular_arrow\":\n                                projectileSystem.createProjectile(engineRef.current.getWorld(), position, direction, attackerEntityId, {\n                                    speed: 25,\n                                    damage: 10,\n                                    lifetime: 3,\n                                    maxDistance: 25,\n                                    opacity: 0.8\n                                } // PVP damage handled by CombatSystem\n                                );\n                                break;\n                            case \"charged_arrow\":\n                                projectileSystem.createChargedArrowProjectile(engineRef.current.getWorld(), position, direction, attackerEntityId, {\n                                    speed: 35,\n                                    damage: 50,\n                                    lifetime: 3,\n                                    piercing: true,\n                                    opacity: 0.8\n                                });\n                                break;\n                            case \"entropic_bolt\":\n                                projectileSystem.createEntropicBoltProjectile(engineRef.current.getWorld(), position, direction, attackerEntityId, {\n                                    speed: 20,\n                                    damage: 20,\n                                    lifetime: 1.75,\n                                    piercing: false,\n                                    opacity: 0.8\n                                });\n                                break;\n                            case \"crossentropy_bolt\":\n                                projectileSystem.createCrossentropyBoltProjectile(engineRef.current.getWorld(), position, direction, attackerEntityId, {\n                                    speed: 15,\n                                    damage: 90,\n                                    lifetime: 2.5,\n                                    piercing: false,\n                                    opacity: 0.8\n                                });\n                                break;\n                            case \"perfect_shot\":\n                                projectileSystem.createChargedArrowProjectile(engineRef.current.getWorld(), position, direction, attackerEntityId, {\n                                    speed: 40,\n                                    damage: 75,\n                                    lifetime: 3,\n                                    piercing: true,\n                                    opacity: 1.0\n                                });\n                                break;\n                            case \"barrage_projectile\":\n                                // Create Barrage projectiles for PVP\n                                const barrageEntity = projectileSystem.createProjectile(engineRef.current.getWorld(), position, direction, attackerEntityId, {\n                                    speed: 22,\n                                    damage: 30,\n                                    lifetime: 3,\n                                    maxDistance: 25,\n                                    piercing: false,\n                                    opacity: 0.8\n                                });\n                                // Mark as barrage arrow for proper visual rendering\n                                const renderer = barrageEntity.getComponent(_ecs_components_Renderer__WEBPACK_IMPORTED_MODULE_11__.Renderer);\n                                if (renderer === null || renderer === void 0 ? void 0 : renderer.mesh) {\n                                    renderer.mesh.userData.isBarrageArrow = true;\n                                    renderer.mesh.userData.isRegularArrow = false;\n                                }\n                                break;\n                        }\n                        // Release pooled Vector3 objects back to pool after use\n                        _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__.pvpObjectPool.releaseVector3(position);\n                        _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__.pvpObjectPool.releaseVector3(direction);\n                    }\n                }\n                // Update the player state to show attack animation using batched updates\n                const animationData = data.animationData || {};\n                const animationUpdateTime = Date.now();\n                _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchPlayerStateUpdates(setMultiplayerPlayerStates, [\n                    {\n                        playerId: data.playerId,\n                        stateUpdate: {\n                            isSwinging: data.attackType.includes(\"swing\") || data.attackType.includes(\"sword\") && !data.attackType.includes(\"charge\"),\n                            isCharging: data.attackType.includes(\"bow\") && data.attackType.includes(\"charge\"),\n                            isSpinning: data.attackType.includes(\"scythe\") || data.attackType.includes(\"entropic_bolt\") || data.attackType.includes(\"crossentropy_bolt\") || data.attackType.includes(\"sword_charge_spin\") || animationData.isSpinning || false,\n                            isSwordCharging: data.attackType === \"sword_charge_spin\" || data.attackType === \"sword_charge_start\" || animationData.isSpinning || animationData.isSwordCharging || false,\n                            swordComboStep: animationData.comboStep || 1,\n                            chargeProgress: animationData.chargeProgress || 0,\n                            lastAttackType: data.attackType,\n                            lastAttackTime: animationUpdateTime,\n                            lastAnimationUpdate: animationUpdateTime\n                        }\n                    }\n                ]);\n                // Get the player's weapon and subclass for proper animation timing\n                const player = players.get(data.playerId);\n                const playerWeapon = (player === null || player === void 0 ? void 0 : player.weapon) || _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.BOW;\n                const playerSubclass = player === null || player === void 0 ? void 0 : player.subclass;\n                // Calculate weapon-specific animation duration based on actual weapon timing\n                // These durations match the real animation calculations in each weapon component\n                let resetDuration = 100; // Default\n                // Special handling for sword charge attacks\n                if (data.attackType === \"sword_charge_spin\") {\n                    // Charge spin lasts about 1 full rotation at 27.5 rotation speed\n                    // (Math.PI * 2) / 27.5 / (1/60) ≈ 685ms for one full rotation\n                    resetDuration = 50;\n                } else if (data.attackType === \"sword_charge_start\") {\n                    // Charge movement lasts about 1.5 seconds (matches ControlSystem chargeDuration)\n                    resetDuration = 450;\n                } else {\n                    switch(playerWeapon){\n                        case _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE:\n                            // Check if dual wielding (Abyssal subclass level 2+)\n                            if (playerSubclass === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponSubclass.ABYSSAL) {\n                                // Dual scythe timing: similar to Sabres with delays\n                                resetDuration = 350;\n                            } else {\n                                // Single scythe: swingProgress += delta * 8 until >= Math.PI * 0.85\n                                // At 60fps: (Math.PI * 0.85) / 8 / (1/60) ≈ 335ms\n                                resetDuration = 167.5;\n                            }\n                            break;\n                        case _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SWORD:\n                            // swingProgress += delta * 6.75 until >= Math.PI * 0.55 (or 0.9 for combo step 3)\n                            // At 60fps: (Math.PI * 0.55) / 6.75 / (1/60) ≈ 400ms\n                            // Note: 3rd combo hit takes longer but we use average timing for multiplayer sync\n                            resetDuration = 80;\n                            break;\n                        case _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SABRES:\n                            // Two swings with delays - total duration roughly 350ms\n                            resetDuration = 275;\n                            break;\n                        case _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.RUNEBLADE:\n                            // Same timing as sword: swingProgress += delta * 6.75 until >= Math.PI * 0.55 (or 0.9 for combo step 3)\n                            // At 60fps: (Math.PI * 0.55) / 6.75 / (1/60) ≈ 400ms\n                            // Note: 3rd combo hit takes longer but we use average timing for multiplayer sync\n                            resetDuration = 80;\n                            break;\n                        case _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.BOW:\n                            resetDuration = 300; // Quick shots\n                            break;\n                        default:\n                            resetDuration = 100; // Default for other weapons\n                    }\n                }\n                // Schedule animation reset using batched updates\n                setTimeout(()=>{\n                    _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchPlayerStateUpdates(setMultiplayerPlayerStates, [\n                        {\n                            playerId: data.playerId,\n                            stateUpdate: {\n                                isSwinging: false,\n                                isCharging: false,\n                                isSpinning: false,\n                                isSwordCharging: false\n                            }\n                        }\n                    ]);\n                }, resetDuration);\n            }\n        };\n        const handlePlayerAbility = (data)=>{\n            if (data.playerId !== socket.id) {\n                // Handle special abilities like Divine Storm, Viper Sting, and Barrage\n                if (data.abilityType === \"divine_storm\") {\n                    // Trigger visual Divine Storm effect at the player's position\n                    const position = _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__.pvpObjectPool.acquireVector3(data.position.x, data.position.y, data.position.z);\n                    (0,_components_weapons_DivineStormManager__WEBPACK_IMPORTED_MODULE_43__.triggerGlobalDivineStorm)(position, data.playerId);\n                    // Release pooled Vector3 after use\n                    _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__.pvpObjectPool.releaseVector3(position);\n                    // Use batched updates for Divine Storm animation\n                    _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchPlayerStateUpdates(setMultiplayerPlayerStates, [\n                        {\n                            playerId: data.playerId,\n                            stateUpdate: {\n                                isDivineStorming: true,\n                                isSpinning: true,\n                                isSwordCharging: false\n                            }\n                        }\n                    ]);\n                    // Reset Divine Storm state after duration using batched updates\n                    setTimeout(()=>{\n                        _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchPlayerStateUpdates(setMultiplayerPlayerStates, [\n                            {\n                                playerId: data.playerId,\n                                stateUpdate: {\n                                    isDivineStorming: false,\n                                    isSpinning: false // Reset spinning animation\n                                }\n                            }\n                        ]);\n                    }, 4000); // Divine Storm lasts 4 seconds\n                } else if (data.abilityType === \"viper_sting\") {\n                    // Skip processing our own viper sting abilities to prevent any potential issues\n                    if (data.playerId === socket.id) {\n                        return;\n                    }\n                    // Trigger visual effect - this should create the proper Viper Sting projectiles\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    // Update the Viper Sting parent ref to the other player's position for visual effect\n                    const originalPosition = viperStingParentRef.current.position.clone();\n                    const originalQuaternion = {\n                        ...viperStingParentRef.current.quaternion\n                    };\n                    // Temporarily set the parent ref to the other player's position and direction\n                    viperStingParentRef.current.position.copy(position);\n                    // Calculate quaternion from the other player's direction\n                    const angle = Math.atan2(direction.x, direction.z);\n                    viperStingParentRef.current.quaternion = {\n                        x: 0,\n                        y: Math.sin(angle / 2),\n                        z: 0,\n                        w: Math.cos(angle / 2)\n                    };\n                    // Trigger the Viper Sting visual effect\n                    const success = (0,_components_projectiles_ViperStingManager__WEBPACK_IMPORTED_MODULE_51__.triggerGlobalViperSting)();\n                    // Restore original parent ref position after a short delay\n                    setTimeout(()=>{\n                        viperStingParentRef.current.position.copy(originalPosition);\n                        viperStingParentRef.current.quaternion = originalQuaternion;\n                    }, 100);\n                    setMultiplayerPlayerStates((prev)=>{\n                        const updated = new Map(prev);\n                        const currentState = updated.get(data.playerId) || {\n                            isCharging: false,\n                            chargeProgress: 0,\n                            isSwinging: false,\n                            swordComboStep: 1,\n                            isDivineStorming: false,\n                            isSpinning: false,\n                            isSwordCharging: false,\n                            isDeflecting: false,\n                            isViperStingCharging: false,\n                            viperStingChargeProgress: 0,\n                            isBarrageCharging: false,\n                            barrageChargeProgress: 0,\n                            isCobraShotCharging: false,\n                            cobraShotChargeProgress: 0,\n                            isSkyfalling: false,\n                            isBackstabbing: false\n                        };\n                        updated.set(data.playerId, {\n                            ...currentState,\n                            isViperStingCharging: true,\n                            viperStingChargeProgress: 1.0 // Full charge when triggered\n                        });\n                        // Reset Viper Sting state after duration\n                        setTimeout(()=>{\n                            setMultiplayerPlayerStates((prev)=>{\n                                const updated = new Map(prev);\n                                const state = updated.get(data.playerId);\n                                if (state) {\n                                    updated.set(data.playerId, {\n                                        ...state,\n                                        isViperStingCharging: false,\n                                        viperStingChargeProgress: 0\n                                    });\n                                }\n                                return updated;\n                            });\n                        }, 2000); // Viper Sting lasts 2 seconds\n                        return updated;\n                    });\n                } else if (data.abilityType === \"barrage\") {\n                    // Skip processing our own barrage abilities to prevent any potential issues\n                    if (data.playerId === socket.id) {\n                        return;\n                    }\n                    // Trigger visual effect\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    (0,_components_projectiles_BarrageManager__WEBPACK_IMPORTED_MODULE_52__.triggerGlobalBarrage)(position, direction);\n                    setMultiplayerPlayerStates((prev)=>{\n                        const updated = new Map(prev);\n                        const currentState = updated.get(data.playerId) || {\n                            isCharging: false,\n                            chargeProgress: 0,\n                            isSwinging: false,\n                            swordComboStep: 1,\n                            isDivineStorming: false,\n                            isSpinning: false,\n                            isSwordCharging: false,\n                            isDeflecting: false,\n                            isViperStingCharging: false,\n                            viperStingChargeProgress: 0,\n                            isBarrageCharging: false,\n                            barrageChargeProgress: 0,\n                            isCobraShotCharging: false,\n                            cobraShotChargeProgress: 0,\n                            isSkyfalling: false,\n                            isBackstabbing: false\n                        };\n                        updated.set(data.playerId, {\n                            ...currentState,\n                            isBarrageCharging: true,\n                            barrageChargeProgress: 1.0 // Full charge when triggered\n                        });\n                        // Reset Barrage state after duration\n                        setTimeout(()=>{\n                            setMultiplayerPlayerStates((prev)=>{\n                                const updated = new Map(prev);\n                                const state = updated.get(data.playerId);\n                                if (state) {\n                                    updated.set(data.playerId, {\n                                        ...state,\n                                        isBarrageCharging: false,\n                                        barrageChargeProgress: 0\n                                    });\n                                }\n                                return updated;\n                            });\n                        }, 1500); // Barrage lasts 1.5 seconds\n                        return updated;\n                    });\n                } else if (data.abilityType === \"frost_nova\") {\n                    // Create frost nova visual effect at the player's position\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    createPvpFrostNovaEffect(data.playerId, position);\n                // Note: PVP damage and freeze effects are now handled by PVPFrostNovaManager\n                } else if (data.abilityType === \"reanimate\") {\n                    // Create reanimate visual effect at the player's position\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    createPvpReanimateEffect(data.playerId, position);\n                } else if (data.abilityType === \"smite\") {\n                    // Create smite visual effect at the player's position\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    createPvpSmiteEffect(data.playerId, position, undefined); // No healing callback for remote players\n                } else if (data.abilityType === \"deathgrasp\") {\n                    // Create death grasp visual effect\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    const targetPosition = position.clone().add(direction.clone().multiplyScalar(8));\n                    createPvpDeathGraspEffect(data.playerId, position, direction);\n                    // Find target player to pull (closest player in front of caster)\n                    let closestTarget = null;\n                    players.forEach((player)=>{\n                        if (player.id === data.playerId) return; // Don't pull self\n                        const playerPos = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(player.position.x, player.position.y, player.position.z);\n                        const distance = position.distanceTo(playerPos);\n                        // Check if player is in front of caster and within range\n                        const toPlayer = playerPos.clone().sub(position).normalize();\n                        const dotProduct = direction.dot(toPlayer);\n                        if (dotProduct > 0.5 && distance <= 8) {\n                            if (!closestTarget || distance < closestTarget.distance) {\n                                closestTarget = {\n                                    id: player.id,\n                                    distance\n                                };\n                            }\n                        }\n                    });\n                    // Pull the closest target player if found\n                    if (closestTarget !== null && closestTarget !== undefined) {\n                        const target = closestTarget;\n                        createPvpDeathGraspPull(target.id, position);\n                    }\n                } else if (data.abilityType === \"charge\") {\n                    setMultiplayerPlayerStates((prev)=>{\n                        const updated = new Map(prev);\n                        const currentState = updated.get(data.playerId) || {\n                            isCharging: false,\n                            chargeProgress: 0,\n                            isSwinging: false,\n                            swordComboStep: 1,\n                            isDivineStorming: false,\n                            isSpinning: false,\n                            isSwordCharging: false,\n                            isDeflecting: false,\n                            isViperStingCharging: false,\n                            viperStingChargeProgress: 0,\n                            isBarrageCharging: false,\n                            barrageChargeProgress: 0,\n                            isCobraShotCharging: false,\n                            cobraShotChargeProgress: 0,\n                            isSkyfalling: false,\n                            isBackstabbing: false\n                        };\n                        updated.set(data.playerId, {\n                            ...currentState,\n                            isSwordCharging: true\n                        });\n                        // Reset Charge state after duration (charge lasts about 2 seconds)\n                        setTimeout(()=>{\n                            setMultiplayerPlayerStates((prev)=>{\n                                const updated = new Map(prev);\n                                const state = updated.get(data.playerId);\n                                if (state) {\n                                    updated.set(data.playerId, {\n                                        ...state,\n                                        isSwordCharging: false\n                                    });\n                                }\n                                return updated;\n                            });\n                        }, 2000);\n                        return updated;\n                    });\n                } else if (data.abilityType === \"deflect\") {\n                    // Trigger visual Deflect Shield effect at the player's position\n                    const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    // Calculate rotation from direction for shield positioning\n                    const rotation = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, Math.atan2(direction.x, direction.z), 0);\n                    (0,_components_weapons_DeflectShieldManager__WEBPACK_IMPORTED_MODULE_44__.triggerGlobalDeflectShield)(position, rotation, data.playerId);\n                    setMultiplayerPlayerStates((prev)=>{\n                        const updated = new Map(prev);\n                        const currentState = updated.get(data.playerId) || {\n                            isCharging: false,\n                            chargeProgress: 0,\n                            isSwinging: false,\n                            swordComboStep: 1,\n                            isDivineStorming: false,\n                            isSpinning: false,\n                            isSwordCharging: false,\n                            isDeflecting: false,\n                            isViperStingCharging: false,\n                            viperStingChargeProgress: 0,\n                            isBarrageCharging: false,\n                            barrageChargeProgress: 0,\n                            isCobraShotCharging: false,\n                            cobraShotChargeProgress: 0,\n                            isSkyfalling: false,\n                            isBackstabbing: false\n                        };\n                        updated.set(data.playerId, {\n                            ...currentState,\n                            isDeflecting: true\n                        });\n                        // Reset Deflect state after duration (deflect lasts 3 seconds)\n                        setTimeout(()=>{\n                            setMultiplayerPlayerStates((prev)=>{\n                                const updated = new Map(prev);\n                                const state = updated.get(data.playerId);\n                                if (state) {\n                                    updated.set(data.playerId, {\n                                        ...state,\n                                        isDeflecting: false\n                                    });\n                                }\n                                return updated;\n                            });\n                        }, 3000);\n                        return updated;\n                    });\n                } else if (data.abilityType === \"skyfall\") {\n                    // Set the skyfall animation state for the attacking player\n                    setMultiplayerPlayerStates((prev)=>{\n                        const updated = new Map(prev);\n                        const currentState = updated.get(data.playerId) || {\n                            isCharging: false,\n                            chargeProgress: 0,\n                            isSwinging: false,\n                            swordComboStep: 1,\n                            isDivineStorming: false,\n                            isSpinning: false,\n                            isSwordCharging: false,\n                            isDeflecting: false,\n                            isViperStingCharging: false,\n                            viperStingChargeProgress: 0,\n                            isBarrageCharging: false,\n                            barrageChargeProgress: 0,\n                            isCobraShotCharging: false,\n                            cobraShotChargeProgress: 0,\n                            isSkyfalling: false,\n                            isBackstabbing: false\n                        };\n                        updated.set(data.playerId, {\n                            ...currentState,\n                            isSkyfalling: true\n                        });\n                        // Reset Skyfall state after duration (skyfall lasts about 3-4 seconds total)\n                        setTimeout(()=>{\n                            setMultiplayerPlayerStates((prev)=>{\n                                const updated = new Map(prev);\n                                const state = updated.get(data.playerId);\n                                if (state) {\n                                    updated.set(data.playerId, {\n                                        ...state,\n                                        isSkyfalling: false\n                                    });\n                                }\n                                return updated;\n                            });\n                        }, 1750); // Skyfall duration\n                        return updated;\n                    });\n                } else if (data.abilityType === \"backstab\") {\n                    // Backstab is an instant melee attack, so we need to:\n                    // 1. Calculate damage based on position relative to targets\n                    // 2. Apply damage to players in range\n                    // 3. Show brief animation state\n                    const attackerPosition = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.position.x, data.position.y, data.position.z);\n                    const attackerDirection = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(data.direction.x, data.direction.y, data.direction.z);\n                    // Set the backstab animation state for the attacking player\n                    setMultiplayerPlayerStates((prev)=>{\n                        const updated = new Map(prev);\n                        const currentState = updated.get(data.playerId) || {\n                            isCharging: false,\n                            chargeProgress: 0,\n                            isSwinging: false,\n                            swordComboStep: 1,\n                            isDivineStorming: false,\n                            isSpinning: false,\n                            isDeflecting: false,\n                            isSwordCharging: false,\n                            isViperStingCharging: false,\n                            viperStingChargeProgress: 0,\n                            isBarrageCharging: false,\n                            barrageChargeProgress: 0,\n                            isCobraShotCharging: false,\n                            cobraShotChargeProgress: 0,\n                            isSkyfalling: false,\n                            isBackstabbing: false\n                        };\n                        // Set backstab animation state\n                        updated.set(data.playerId, {\n                            ...currentState,\n                            isBackstabbing: true\n                        });\n                        // Reset backstab animation after duration\n                        setTimeout(()=>{\n                            setMultiplayerPlayerStates((prev)=>{\n                                const updated = new Map(prev);\n                                const currentState = updated.get(data.playerId);\n                                if (currentState) {\n                                    updated.set(data.playerId, {\n                                        ...currentState,\n                                        isBackstabbing: false\n                                    });\n                                }\n                                return updated;\n                            });\n                        }, 1000); // Match backstab duration\n                        return updated;\n                    });\n                    // Find the attacker player to get their rotation\n                    const attackerPlayer = players.get(data.playerId);\n                    if (attackerPlayer) {\n                        // Check if local player is in range and calculate damage\n                        const localPlayer = players.get((socket === null || socket === void 0 ? void 0 : socket.id) || \"\");\n                        if (localPlayer && (socket === null || socket === void 0 ? void 0 : socket.id) !== data.playerId) {\n                            const localPlayerPos = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(localPlayer.position.x, localPlayer.position.y, localPlayer.position.z);\n                            const distance = attackerPosition.distanceTo(localPlayerPos);\n                            if (distance <= 2.5) {\n                                // Check if attacker is in front of local player (cone attack)\n                                const directionToLocal = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3().subVectors(localPlayerPos, attackerPosition).normalize();\n                                const dotProduct = attackerDirection.dot(directionToLocal);\n                                const angleThreshold = Math.cos(Math.PI / 3); // 60 degree cone\n                                if (dotProduct >= angleThreshold) {\n                                    // Local player is in the attack cone, calculate backstab damage\n                                    let damage = 75; // Base damage\n                                    let isBackstab = false;\n                                    // Calculate local player's facing direction from their rotation\n                                    const localFacingDirection = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(Math.sin(localPlayer.rotation.y), 0, Math.cos(localPlayer.rotation.y)).normalize();\n                                    // Vector from local player to attacker\n                                    const attackerDirectionFromLocal = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3().subVectors(attackerPosition, localPlayerPos).normalize();\n                                    // Check if attacker is behind local player (dot product < 0 means opposite direction)\n                                    const behindDotProduct = localFacingDirection.dot(attackerDirectionFromLocal);\n                                    isBackstab = behindDotProduct < -0.3; // 70 degree cone behind target\n                                    if (isBackstab) {\n                                        damage = 150; // Backstab damage\n                                    }\n                                    // Apply damage to local player\n                                    if (broadcastPlayerDamage && (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                        broadcastPlayerDamage(socket.id, damage, \"backstab\");\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // Show brief backstab animation state\n                    setMultiplayerPlayerStates((prev)=>{\n                        const updated = new Map(prev);\n                        const currentState = updated.get(data.playerId) || {\n                            isCharging: false,\n                            chargeProgress: 0,\n                            isSwinging: false,\n                            swordComboStep: 1,\n                            isDivineStorming: false,\n                            isSpinning: false,\n                            isSwordCharging: false,\n                            isDeflecting: false,\n                            isViperStingCharging: false,\n                            viperStingChargeProgress: 0,\n                            isBarrageCharging: false,\n                            barrageChargeProgress: 0,\n                            isCobraShotCharging: false,\n                            cobraShotChargeProgress: 0,\n                            isSkyfalling: false,\n                            isBackstabbing: false\n                        };\n                        updated.set(data.playerId, {\n                            ...currentState,\n                            isSwinging: true // Brief swing animation for backstab\n                        });\n                        // Reset swing state after brief duration\n                        setTimeout(()=>{\n                            setMultiplayerPlayerStates((prev)=>{\n                                const updated = new Map(prev);\n                                const state = updated.get(data.playerId);\n                                if (state) {\n                                    updated.set(data.playerId, {\n                                        ...state,\n                                        isSwinging: false\n                                    });\n                                }\n                                return updated;\n                            });\n                        }, 300); // Brief 300ms animation\n                        return updated;\n                    });\n                }\n            }\n        };\n        const handlePlayerDamaged = (data)=>{\n            // If we are the target, apply damage to our player\n            if (data.targetPlayerId === socket.id && playerEntity) {\n                const health = playerEntity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                const shield = playerEntity.getComponent(_ecs_components_Shield__WEBPACK_IMPORTED_MODULE_10__.Shield);\n                if (health) {\n                    // Pass the entity so Health component can use Shield for damage absorption\n                    health.takeDamage(data.damage, Date.now() / 1000, playerEntity);\n                }\n            }\n        };\n        const handlePlayerAnimationState = (data)=>{\n            if (data.playerId !== socket.id) {\n                setMultiplayerPlayerStates((prev)=>{\n                    const updated = new Map(prev);\n                    const currentState = updated.get(data.playerId) || {\n                        isCharging: false,\n                        chargeProgress: 0,\n                        isSwinging: false,\n                        swordComboStep: 1 | 2 | 3,\n                        isDivineStorming: false,\n                        isSpinning: false,\n                        isSwordCharging: false,\n                        isDeflecting: false,\n                        isViperStingCharging: false,\n                        viperStingChargeProgress: 0,\n                        isBarrageCharging: false,\n                        barrageChargeProgress: 0,\n                        isCobraShotCharging: false,\n                        cobraShotChargeProgress: 0,\n                        isBackstabbing: false\n                    };\n                    // Update with the received animation state\n                    const newState = {\n                        ...currentState,\n                        ...data.animationState,\n                        lastAnimationUpdate: Date.now()\n                    };\n                    updated.set(data.playerId, newState);\n                    return updated;\n                });\n            }\n        };\n        const handlePlayerEffect = (data)=>{\n            var _data_effect, _data_effect1;\n            if (((_data_effect = data.effect) === null || _data_effect === void 0 ? void 0 : _data_effect.type) === \"venom\") {\n                const { targetPlayerId, position, duration } = data.effect;\n                // Create venom effect on the target player (could be local player or other player)\n                if (targetPlayerId && position) {\n                    const venomPosition = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(position.x, position.y, position.z);\n                    createPvpVenomEffect(targetPlayerId, venomPosition);\n                }\n            }\n            if (((_data_effect1 = data.effect) === null || _data_effect1 === void 0 ? void 0 : _data_effect1.type) === \"deathgrasp_pull\") {\n                const { targetPlayerId, position, casterId } = data.effect;\n                console.log(\"\\uD83C\\uDFA3 Received DeathGrasp pull effect for target \".concat(targetPlayerId, \" from caster \").concat(casterId));\n                // If this client is the target player, update the local position\n                if (targetPlayerId === (socket === null || socket === void 0 ? void 0 : socket.id) && position) {\n                    const pullPosition = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(position.x, position.y, position.z);\n                    console.log(\"\\uD83C\\uDFA3 Applying DeathGrasp pull to local player, moving to:\", pullPosition);\n                    // Update local player entity position\n                    if (playerEntity) {\n                        const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                        if (transform) {\n                            transform.setPosition(pullPosition.x, pullPosition.y, pullPosition.z);\n                            console.log(\"\\uD83C\\uDFA3 Local player position updated via DeathGrasp pull\");\n                        }\n                    }\n                }\n            }\n        };\n        const handlePlayerDebuff = (data)=>{\n            console.log(\"\\uD83C\\uDFAF Received PVP player debuff:\", data);\n            console.log('\\uD83D\\uDD0D Debug: My socket ID is \"'.concat(socket === null || socket === void 0 ? void 0 : socket.id, '\", target is \"').concat(data.targetPlayerId, '\", am I the target? ').concat((socket === null || socket === void 0 ? void 0 : socket.id) === data.targetPlayerId));\n            const { targetPlayerId, debuffType, duration, effectData } = data;\n            if (targetPlayerId && debuffType && duration) {\n                let position;\n                // If this is the local player being debuffed, use the local player entity position for accuracy\n                if (targetPlayerId === (socket === null || socket === void 0 ? void 0 : socket.id) && playerEntity) {\n                    const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                    if (transform) {\n                        position = transform.position.clone();\n                    } else {\n                        // Fallback to current player position from state\n                        position = playerPosition.clone();\n                    }\n                } else {\n                    // For other players, use the multiplayer context or effectData\n                    const targetPlayer = players.get(targetPlayerId);\n                    position = targetPlayer ? new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(targetPlayer.position.x, targetPlayer.position.y, targetPlayer.position.z) : (effectData === null || effectData === void 0 ? void 0 : effectData.position) ? new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(effectData.position.x, effectData.position.y, effectData.position.z) : new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0);\n                }\n                createPvpDebuffEffect(targetPlayerId, debuffType, position, duration);\n            }\n        };\n        socket.on(\"player-attacked\", handlePlayerAttack);\n        socket.on(\"player-used-ability\", handlePlayerAbility);\n        socket.on(\"player-damaged\", handlePlayerDamaged);\n        socket.on(\"player-animation-state\", handlePlayerAnimationState);\n        socket.on(\"player-effect\", handlePlayerEffect);\n        socket.on(\"player-debuff\", handlePlayerDebuff);\n        return ()=>{\n            socket.off(\"player-attacked\", handlePlayerAttack);\n            socket.off(\"player-used-ability\", handlePlayerAbility);\n            socket.off(\"player-damaged\", handlePlayerDamaged);\n            socket.off(\"player-animation-state\", handlePlayerAnimationState);\n            socket.off(\"player-effect\", handlePlayerEffect);\n            socket.off(\"player-debuff\", handlePlayerDebuff);\n        };\n    }, [\n        socket,\n        playerEntity\n    ]);\n    // Add a cleanup effect to prevent stuck animations\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const cleanupInterval = setInterval(()=>{\n            setMultiplayerPlayerStates((prev)=>{\n                const updated = new Map(prev);\n                const now = Date.now();\n                let hasChanges = false;\n                updated.forEach((state, playerId)=>{\n                    // If an animation has been active for more than 3 seconds, force reset it\n                    if (state.lastAnimationUpdate && now - state.lastAnimationUpdate > 3000) {\n                        if (state.isSwinging || state.isCharging || state.isSpinning) {\n                            console.log(\"\\uD83D\\uDD27 Force resetting stuck animation for player \".concat(playerId));\n                            updated.set(playerId, {\n                                ...state,\n                                isSwinging: false,\n                                isCharging: false,\n                                isSpinning: false\n                            });\n                            hasChanges = true;\n                        }\n                    }\n                });\n                return hasChanges ? updated : prev;\n            });\n        }, 1000); // Check every second\n        return ()=>clearInterval(cleanupInterval);\n    }, []);\n    // Sync server players and towers with local ECS entities for PVP damage system\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!engineRef.current || !gameStarted) return;\n        const world = engineRef.current.getWorld();\n        // Create local ECS entities for other players (for collision detection)\n        players.forEach((serverPlayer, playerId)=>{\n            // Skip our own player\n            if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) return;\n            if (!serverPlayerEntities.current.has(playerId)) {\n                // Create a new local ECS entity for this server player\n                const entity = world.createEntity();\n                // Add Transform component\n                const transform = world.createComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                transform.setPosition(serverPlayer.position.x, serverPlayer.position.y, serverPlayer.position.z);\n                entity.addComponent(transform);\n                // Add InterpolationBuffer component for smooth movement\n                const interpolationBuffer = world.createComponent(_ecs_components_Interpolation__WEBPACK_IMPORTED_MODULE_15__.InterpolationBuffer);\n                entity.addComponent(interpolationBuffer);\n                // Add Health component (for PVP damage)\n                const health = new _ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health(serverPlayer.maxHealth);\n                health.currentHealth = serverPlayer.health;\n                entity.addComponent(health);\n                // Add Shield component (for PVP damage)\n                const shield = new _ecs_components_Shield__WEBPACK_IMPORTED_MODULE_10__.Shield(100, 20, 5); // 100 max shield, 20/s regen, 5s delay\n                entity.addComponent(shield);\n                // Add Movement component for equal collision treatment with local player\n                // Remote players don't use this for actual movement (they're position-synced from server)\n                // but having it ensures equal collision resolution in CollisionSystem\n                const movement = world.createComponent(_ecs_components_Movement__WEBPACK_IMPORTED_MODULE_8__.Movement);\n                movement.maxSpeed = 3.75; // Match local player settings\n                movement.jumpForce = 8;\n                movement.friction = 0.85;\n                movement.canMove = false; // Disable actual movement since position comes from server\n                entity.addComponent(movement);\n                // Add Collider component for PVP damage detection\n                const collider = world.createComponent(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.Collider);\n                collider.type = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.ColliderType.SPHERE;\n                collider.radius = 0.9; // Reduced collision radius for better player proximity in PVP\n                collider.layer = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.CollisionLayer.ENEMY; // Use enemy layer so projectiles can hit remote players in PVP\n                // Set collision mask to collide with environment only - NO player-to-player collision in PVP\n                collider.setMask(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.CollisionLayer.ENVIRONMENT);\n                collider.setOffset(0, 0.25, 0); // Center on player\n                entity.addComponent(collider);\n                // Notify systems that the entity is ready\n                world.notifyEntityAdded(entity);\n                // Store the mapping\n                serverPlayerEntities.current.set(playerId, entity.id);\n            } else {\n                // Update existing local ECS entity\n                const entityId = serverPlayerEntities.current.get(playerId);\n                const entity = world.getEntity(entityId);\n                if (entity) {\n                    // Update position using interpolation buffer for remote players only\n                    const transform = entity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                    const interpolationBuffer = entity.getComponent(_ecs_components_Interpolation__WEBPACK_IMPORTED_MODULE_15__.InterpolationBuffer);\n                    if (transform && interpolationBuffer) {\n                        // Create rotation quaternion from Euler angles\n                        const rotation = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\n                        rotation.setFromEuler(new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Euler(serverPlayer.rotation.x, serverPlayer.rotation.y, serverPlayer.rotation.z));\n                        // Add server state to interpolation buffer for smooth remote player movement\n                        const position = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(serverPlayer.position.x, serverPlayer.position.y, serverPlayer.position.z);\n                        interpolationBuffer.addServerState(position, rotation);\n                    } else if (transform) {\n                        // Fallback to direct position update if interpolation buffer not available\n                        transform.setPosition(serverPlayer.position.x, serverPlayer.position.y, serverPlayer.position.z);\n                    }\n                    // Reset velocity for remote players to prevent drift from collision resolution\n                    const movement = entity.getComponent(_ecs_components_Movement__WEBPACK_IMPORTED_MODULE_8__.Movement);\n                    if (movement) {\n                        movement.velocity.set(0, 0, 0); // Clear any velocity from collision resolution\n                        movement.acceleration.set(0, 0, 0); // Clear acceleration\n                    }\n                    // Update health\n                    const health = entity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                    if (health) {\n                        health.maxHealth = serverPlayer.maxHealth;\n                        health.currentHealth = serverPlayer.health;\n                    }\n                } else {\n                    console.warn(\"⚠️ Could not find local ECS entity \".concat(entityId, \" for PVP player \").concat(playerId));\n                }\n            }\n        });\n        // Clean up local entities for players that no longer exist\n        const currentPlayerIds = new Set(players.keys());\n        const entitiesToRemove = [];\n        serverPlayerEntities.current.forEach((entityId, playerId)=>{\n            if (!currentPlayerIds.has(playerId) || playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                const entity = world.getEntity(entityId);\n                if (entity) {\n                    // Mark entity as dead instead of removing\n                    const health = entity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                    if (health) {\n                        health.currentHealth = 0;\n                        health.isDead = true;\n                    }\n                    console.log(\"\\uD83D\\uDC80 Marked local ECS entity \".concat(entityId, \" as dead for disconnected player \").concat(playerId));\n                }\n                entitiesToRemove.push(playerId);\n            }\n        });\n        // Remove from mapping\n        entitiesToRemove.forEach((playerId)=>{\n            serverPlayerEntities.current.delete(playerId);\n        });\n        // Create local ECS entities for towers\n        towers.forEach((serverTower, towerId)=>{\n            if (!serverTowerEntities.current.has(towerId)) {\n                // Create a new local ECS entity for this server tower\n                const entity = world.createEntity();\n                // Add Transform component\n                const transform = world.createComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                transform.setPosition(serverTower.position.x, serverTower.position.y, serverTower.position.z);\n                entity.addComponent(transform);\n                // Add Tower component\n                const tower = world.createComponent(_ecs_components_Tower__WEBPACK_IMPORTED_MODULE_13__.Tower);\n                tower.ownerId = serverTower.ownerId;\n                tower.towerIndex = serverTower.towerIndex;\n                entity.addComponent(tower);\n                // Add Health component\n                const health = new _ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health(serverTower.maxHealth);\n                health.currentHealth = serverTower.health;\n                entity.addComponent(health);\n                // Add Collider component for tower damage detection\n                const collider = world.createComponent(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.Collider);\n                collider.type = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.ColliderType.CYLINDER;\n                collider.radius = 1.5; // Tower base radius\n                collider.height = 4; // Tower height\n                collider.layer = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.CollisionLayer.ENEMY; // Use enemy layer so projectiles can hit towers\n                collider.setMask(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.CollisionLayer.ENVIRONMENT | _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.CollisionLayer.PLAYER);\n                collider.setOffset(0, 2, 0); // Center vertically\n                entity.addComponent(collider);\n                // Notify systems that the entity is ready\n                world.notifyEntityAdded(entity);\n                // Store the mapping\n                serverTowerEntities.current.set(towerId, entity.id);\n            } else {\n                // Update existing local ECS entity\n                const entityId = serverTowerEntities.current.get(towerId);\n                const entity = world.getEntity(entityId);\n                if (entity) {\n                    // Update health\n                    const health = entity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                    if (health) {\n                        health.maxHealth = serverTower.maxHealth;\n                        health.currentHealth = serverTower.health;\n                        if (serverTower.isDead && !health.isDead) {\n                            health.currentHealth = 0;\n                            health.isDead = true;\n                        }\n                    }\n                    // Update tower state\n                    const tower = entity.getComponent(_ecs_components_Tower__WEBPACK_IMPORTED_MODULE_13__.Tower);\n                    if (tower && serverTower.isDead && !tower.isDead) {\n                        tower.die(Date.now() / 1000);\n                    }\n                } else {\n                    console.warn(\"⚠️ Could not find local ECS entity \".concat(entityId, \" for tower \").concat(towerId));\n                }\n            }\n        });\n        // Clean up local entities for towers that no longer exist\n        const currentTowerIds = new Set(towers.keys());\n        const towerEntitiesToRemove = [];\n        serverTowerEntities.current.forEach((entityId, towerId)=>{\n            if (!currentTowerIds.has(towerId)) {\n                const entity = world.getEntity(entityId);\n                if (entity) {\n                    // Mark entity as dead instead of removing\n                    const health = entity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                    const tower = entity.getComponent(_ecs_components_Tower__WEBPACK_IMPORTED_MODULE_13__.Tower);\n                    if (health && tower) {\n                        health.currentHealth = 0;\n                        health.isDead = true;\n                        tower.die(Date.now() / 1000);\n                    }\n                    console.log(\"\\uD83D\\uDC80 Marked local ECS entity \".concat(entityId, \" as dead for removed tower \").concat(towerId));\n                }\n                towerEntitiesToRemove.push(towerId);\n            }\n        });\n        // Remove from mapping\n        towerEntitiesToRemove.forEach((towerId)=>{\n            serverTowerEntities.current.delete(towerId);\n        });\n    }, [\n        players,\n        towers,\n        gameStarted,\n        socket === null || socket === void 0 ? void 0 : socket.id\n    ]);\n    // Update tower system player mapping when players change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (towerSystemRef.current && (socket === null || socket === void 0 ? void 0 : socket.id)) {\n            towerSystemRef.current.setPlayerMapping(serverPlayerEntities.current, socket.id);\n        }\n    }, [\n        players,\n        socket === null || socket === void 0 ? void 0 : socket.id\n    ]);\n    // Initialize the PVP game engine\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isInitialized.current || !gameStarted) return;\n        isInitialized.current = true;\n        // Initialize damage system with some test runes for demonstration\n        (0,_core_DamageCalculator__WEBPACK_IMPORTED_MODULE_48__.setGlobalCriticalRuneCount)(0); // 11% + (2 * 3%) = 17% crit chance\n        (0,_core_DamageCalculator__WEBPACK_IMPORTED_MODULE_48__.setGlobalCritDamageRuneCount)(0); // 2.0 + (1 * 0.15) = 2.15x crit damage\n        // Create engine\n        const engine = new _core_Engine__WEBPACK_IMPORTED_MODULE_5__.Engine({\n            enableDebug: true\n        });\n        engineRef.current = engine;\n        // Initialize with canvas\n        const canvas = gl.domElement;\n        engine.initialize(canvas).then(()=>{\n            // Create a PVP damage callback that maps local ECS entity IDs back to server player IDs\n            const damagePlayerWithMapping = (entityId, damage)=>{\n                // Find the server player ID that corresponds to this local ECS entity ID\n                const numericEntityId = parseInt(entityId);\n                let serverPlayerId = null;\n                serverPlayerEntities.current.forEach((localEntityId, playerId)=>{\n                    if (localEntityId === numericEntityId) {\n                        serverPlayerId = playerId;\n                    }\n                });\n                if (serverPlayerId) {\n                    console.log(\"\\uD83C\\uDFAF Mapping local entity \".concat(entityId, \" to server player \").concat(serverPlayerId, \" for \").concat(damage, \" PVP damage\"));\n                    broadcastPlayerDamage(serverPlayerId, damage);\n                } else {\n                    console.warn(\"⚠️ Could not find server player ID for local entity \".concat(entityId));\n                }\n            };\n            const { player, controlSystem, towerSystem, summonedUnitSystem } = setupPVPGame(engine, scene, camera, gl, damagePlayerWithMapping, damageTower);\n            console.log(\"\\uD83C\\uDFAE PVP Player entity created:\", player, \"ID:\", player.id);\n            setPlayerEntity(player);\n            playerEntityRef.current = player.id;\n            controlSystemRef.current = controlSystem;\n            towerSystemRef.current = towerSystem;\n            summonedUnitSystemRef.current = summonedUnitSystem;\n            // Set up tower system with player mapping\n            if (towerSystem && (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                towerSystem.setPlayerMapping(serverPlayerEntities.current, socket.id);\n            }\n            // Set up wave completion callback for experience awarding\n            if (summonedUnitSystem) {\n                summonedUnitSystem.setWaveCompleteCallback(handleWaveComplete);\n            }\n            // Pass controlSystem back to parent\n            if (onControlSystemUpdate) {\n                onControlSystemUpdate(controlSystem);\n            }\n            // Set up PVP callbacks (AFTER playerEntity is set)\n            controlSystem.setBowReleaseCallback((finalProgress, isPerfectShot)=>{\n                // Broadcast attack to other players\n                if (playerEntity) {\n                    const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                    if (transform) {\n                        const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                        camera.getWorldDirection(direction);\n                        direction.normalize();\n                        broadcastPlayerAttack(\"bow_release\", transform.position, direction, {\n                            chargeProgress: finalProgress,\n                            isPerfectShot: isPerfectShot\n                        });\n                    }\n                }\n                // Trigger perfect shot visual effect if it was a perfect shot\n                if (isPerfectShot) {\n                    // Get current player position from the engine\n                    const currentPlayerEntity = engine.getWorld().getEntity(playerEntityRef.current);\n                    if (currentPlayerEntity) {\n                        const transform = currentPlayerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                        if (transform) {\n                            // Get camera direction for effect direction\n                            const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                            camera.getWorldDirection(direction);\n                            direction.normalize();\n                            // Apply same downward compensation as projectile system\n                            const compensationAngle = Math.PI / 12; // 30 degrees\n                            const cameraRight = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                            cameraRight.crossVectors(direction, new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 1, 0)).normalize();\n                            const rotationMatrix = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\n                            rotationMatrix.makeRotationAxis(cameraRight, compensationAngle);\n                            direction.applyMatrix4(rotationMatrix);\n                            direction.normalize();\n                            // Create perfect shot effect\n                            const effectId = createPowershotEffect(transform.position.clone(), direction, controlSystem.getCurrentSubclass(), true, true // isElementalShotsUnlocked - for now assume unlocked\n                            );\n                        }\n                    }\n                }\n            });\n            // Set up Divine Storm callback\n            controlSystem.setDivineStormCallback((position, direction, duration)=>{\n                console.log(\"⚡ PVP Divine Storm activated - broadcasting to other players\");\n                // Trigger local visual effect immediately with correct duration\n                (0,_components_weapons_DivineStormManager__WEBPACK_IMPORTED_MODULE_43__.triggerGlobalDivineStorm)(position, socket === null || socket === void 0 ? void 0 : socket.id, duration);\n                // Broadcast to other players with duration info\n                broadcastPlayerAbility(\"divine_storm\", position, direction);\n            });\n            // Set up Viper Sting callback\n            controlSystem.setViperStingCallback((position, direction)=>{\n                broadcastPlayerAbility(\"viper_sting\", position, direction);\n            });\n            // Set up Barrage callback\n            controlSystem.setBarrageCallback((position, direction)=>{\n                broadcastPlayerAbility(\"barrage\", position, direction);\n            });\n            // Set up Frost Nova callback\n            controlSystem.setFrostNovaCallback((position, direction)=>{\n                broadcastPlayerAbility(\"frost_nova\", position, direction);\n            });\n            // Set up Cobra Shot callback (for local visual effects only - projectile is handled via onProjectileCreatedCallback)\n            controlSystem.setCobraShotCallback((position, direction)=>{\n            // Don't broadcast as ability - the projectile is already broadcast via onProjectileCreatedCallback\n            });\n            // Set up Charge callback\n            controlSystem.setChargeCallback((position, direction)=>{\n                // Broadcast as ability for state management\n                broadcastPlayerAbility(\"charge\", position, direction);\n                // Also broadcast as attack for animation\n                broadcastPlayerAttack(\"sword_charge_start\", position, direction, {\n                    isSwordCharging: true\n                });\n            });\n            // Set up Skyfall callback\n            controlSystem.setSkyfallCallback((position, direction)=>{\n                console.log(\"\\uD83C\\uDF1F PVP Skyfall triggered - broadcasting to other players\");\n                broadcastPlayerAbility(\"skyfall\", position, direction);\n            });\n            // Set up Backstab callback\n            controlSystem.setBackstabCallback((position, direction, damage, isBackstab)=>{\n                console.log(\"\\uD83D\\uDDE1️ PVP Backstab triggered - broadcasting to other players (damage: \".concat(damage, \", backstab: \").concat(isBackstab, \")\"));\n                broadcastPlayerAbility(\"backstab\", position, direction);\n            // Note: Animation state is now broadcasted automatically in the game loop\n            });\n            // Set up Sunder callback\n            controlSystem.setSunderCallback((position, direction, damage, stackCount)=>{\n                console.log(\"⚔️ PVP Sunder triggered - broadcasting to other players (damage: \".concat(damage, \", stacks: \").concat(stackCount, \")\"));\n                broadcastPlayerAbility(\"sunder\", position, direction);\n            // Note: Animation state is now broadcasted automatically in the game loop\n            });\n            // Set up Debuff callback for broadcasting freeze/slow effects\n            console.log(\"\\uD83D\\uDD27 Debug: Setting up debuff callback for ControlSystem\");\n            controlSystem.setDebuffCallback((targetEntityId, debuffType, duration, position)=>{\n                console.log(\"\\uD83C\\uDFAF PVP Debuff callback triggered - \".concat(debuffType, \" effect on entity \").concat(targetEntityId));\n                // Find the server player ID that corresponds to this local ECS entity ID\n                let targetPlayerId = null;\n                serverPlayerEntities.current.forEach((localEntityId, playerId)=>{\n                    if (localEntityId === targetEntityId) {\n                        targetPlayerId = playerId;\n                    }\n                });\n                if (targetPlayerId && broadcastPlayerDebuff) {\n                    console.log(\"\\uD83C\\uDFAF Broadcasting \".concat(debuffType, \" effect to player \").concat(targetPlayerId));\n                    broadcastPlayerDebuff(targetPlayerId, debuffType, duration, {\n                        position: {\n                            x: position.x,\n                            y: position.y,\n                            z: position.z\n                        }\n                    });\n                } else {\n                    console.warn(\"⚠️ Could not find server player ID for local entity \".concat(targetEntityId));\n                }\n            });\n            // Set up projectile creation callback\n            controlSystem.setProjectileCreatedCallback((projectileType, position, direction, config)=>{\n                const animationData = {};\n                // Add charge progress for bow projectiles\n                if (projectileType.includes(\"arrow\") || projectileType.includes(\"bolt\")) {\n                    animationData.chargeProgress = controlSystem.getChargeProgress();\n                }\n                broadcastPlayerAttack(projectileType, position, direction, animationData);\n            });\n            // Set up Reanimate callback\n            controlSystem.setReanimateCallback(()=>{\n                if (reanimateRef.current) {\n                    reanimateRef.current.triggerHealingEffect();\n                }\n                // Broadcast Reanimate ability to other players\n                if (player) {\n                    const transform = player.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                    if (transform) {\n                        const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                        camera.getWorldDirection(direction);\n                        direction.normalize();\n                        broadcastPlayerAbility(\"reanimate\", transform.position, direction);\n                    }\n                }\n            });\n            // Set up Smite callback\n            controlSystem.setSmiteCallback((position, direction, onDamageDealt)=>{\n                console.log(\"\\uD83D\\uDD0D DEBUG: Smite callback triggered in PVP mode\");\n                // Create local Smite effect\n                createPvpSmiteEffect((socket === null || socket === void 0 ? void 0 : socket.id) || \"\", position, onDamageDealt);\n                // Broadcast Smite ability to other players\n                broadcastPlayerAbility(\"smite\", position, direction);\n            });\n            // Set up DeathGrasp callback\n            controlSystem.setDeathGraspCallback((position, direction)=>{\n                console.log(\"\\uD83D\\uDD0D DEBUG: DeathGrasp callback triggered in PVP mode\");\n                // Create local DeathGrasp projectile effect\n                createPvpDeathGraspEffect((socket === null || socket === void 0 ? void 0 : socket.id) || \"\", position, direction);\n                // Broadcast DeathGrasp ability to other players\n                broadcastPlayerAbility(\"deathgrasp\", position, direction);\n            });\n            // Set up mana callbacks for Runeblade\n            controlSystem.setConsumeManaCallback(consumeMana);\n            controlSystem.setCheckManaCallback(hasMana);\n            engine.start();\n        });\n        // Cleanup on unmount\n        return ()=>{\n            if (engineRef.current) {\n                engineRef.current.destroy();\n            }\n            // Clear any pending batched updates\n            _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.pvpStateBatcher.clear();\n        };\n    }, [\n        scene,\n        camera,\n        gl,\n        gameStarted\n    ]);\n    // Expose PVP player data globally for ControlSystem access\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        window.pvpPlayers = players;\n        window.localSocketId = socket === null || socket === void 0 ? void 0 : socket.id;\n        window.serverPlayerEntities = serverPlayerEntities;\n        window.multiplayer = {\n            broadcastPlayerEffect: broadcastPlayerEffect\n        };\n        // Expose interpolation system for debugging\n        window.getInterpolationStats = ()=>{\n            if (!engineRef.current) {\n                return {\n                    error: \"Engine not initialized\"\n                };\n            }\n            const world = engineRef.current.getWorld();\n            const interpolationSystem = world.getSystem(_systems_InterpolationSystem__WEBPACK_IMPORTED_MODULE_25__.InterpolationSystem);\n            if (!interpolationSystem) {\n                return {\n                    error: \"InterpolationSystem not found\"\n                };\n            }\n            const stats = {};\n            serverPlayerEntities.current.forEach((entityId, playerId)=>{\n                const entity = world.getEntity(entityId);\n                if (entity) {\n                    stats[playerId] = interpolationSystem.getInterpolationStats(entity);\n                }\n            });\n            return stats;\n        };\n        // Expose advanced interpolation methods for testing\n        window.testInterpolationMethods = ()=>{\n            console.log(\"\\uD83E\\uDDEE Available Interpolation Methods:\");\n            console.log(\"1. Linear Interpolation (LERP) - Currently used\");\n            console.log(\"2. Hermite Spline - Smoother curves with velocity\");\n            console.log(\"3. Catmull-Rom Spline - Smooth curves through waypoints\");\n            console.log(\"4. Cubic Bezier - Custom control point curves\");\n            console.log(\"5. Smooth Step - Easing functions\");\n            console.log(\"6. Smoother Step - Even smoother easing\");\n            console.log(\"\\n\\uD83D\\uDCCA Current Interpolation Stats:\");\n            console.log(window.getInterpolationStats());\n            return \"Interpolation methods available in InterpolationSystem class\";\n        };\n    }, [\n        players,\n        socket === null || socket === void 0 ? void 0 : socket.id\n    ]);\n    // Game loop integration with React Three Fiber\n    (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_54__.F)((state, deltaTime)=>{\n        if (engineRef.current && engineRef.current.isEngineRunning() && gameStarted) {\n            // Update FPS counter\n            updateFPSCounter(engineRef.current.getCurrentFPS());\n            // Reset object pool temporary objects for this frame\n            _utils_PVPObjectPool__WEBPACK_IMPORTED_MODULE_41__.pvpObjectPool.resetFrameTemporaries();\n            // Collect all state updates to batch them\n            const stateUpdates = [];\n            // Update player position for dragon renderer\n            if (playerEntity) {\n                const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                if (transform && transform.position) {\n                    const newPosition = transform.position.clone();\n                    stateUpdates.push({\n                        setter: setPlayerPosition,\n                        value: newPosition\n                    });\n                    // Update Viper Sting parent ref with current position and camera rotation\n                    viperStingParentRef.current.position.copy(newPosition);\n                    // Calculate quaternion from camera direction for Viper Sting\n                    const cameraDirection = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                    camera.getWorldDirection(cameraDirection);\n                    const cameraAngle = Math.atan2(cameraDirection.x, cameraDirection.z);\n                    // Update quaternion for Viper Sting direction\n                    viperStingParentRef.current.quaternion = {\n                        x: 0,\n                        y: Math.sin(cameraAngle / 2),\n                        z: 0,\n                        w: Math.cos(cameraAngle / 2)\n                    };\n                    // Send position updates to other players with camera rotation\n                    const rotation = {\n                        x: 0,\n                        y: cameraAngle,\n                        z: 0\n                    };\n                    updatePlayerPosition(transform.position, rotation);\n                }\n            }\n            // Update weapon state from control system\n            if (controlSystemRef.current) {\n                const newWeaponState = {\n                    currentWeapon: controlSystemRef.current.getCurrentWeapon(),\n                    currentSubclass: controlSystemRef.current.getCurrentSubclass(),\n                    isCharging: controlSystemRef.current.isWeaponCharging(),\n                    chargeProgress: controlSystemRef.current.getChargeProgress(),\n                    isSwinging: controlSystemRef.current.isWeaponSwinging(),\n                    isSpinning: controlSystemRef.current.isWeaponCharging() && controlSystemRef.current.getCurrentWeapon() === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE,\n                    swordComboStep: controlSystemRef.current.getSwordComboStep(),\n                    isDivineStorming: controlSystemRef.current.isDivineStormActive(),\n                    isSwordCharging: controlSystemRef.current.isChargeActive(),\n                    isDeflecting: controlSystemRef.current.isDeflectActive(),\n                    isViperStingCharging: controlSystemRef.current.isViperStingChargingActive(),\n                    viperStingChargeProgress: controlSystemRef.current.getViperStingChargeProgress(),\n                    isBarrageCharging: controlSystemRef.current.isBarrageChargingActive(),\n                    barrageChargeProgress: controlSystemRef.current.getBarrageChargeProgress(),\n                    isCobraShotCharging: controlSystemRef.current.isCobraShotChargingActive(),\n                    cobraShotChargeProgress: controlSystemRef.current.getCobraShotChargeProgress(),\n                    isSkyfalling: controlSystemRef.current.isSkyfallActive(),\n                    isBackstabbing: controlSystemRef.current.isBackstabActive(),\n                    isSundering: controlSystemRef.current.isSunderActive()\n                };\n                // Check for weapon changes and broadcast to other players\n                const prevWeapon = prevWeaponRef.current;\n                if (newWeaponState.currentWeapon !== prevWeapon.weapon || newWeaponState.currentSubclass !== prevWeapon.subclass) {\n                    updatePlayerWeapon(newWeaponState.currentWeapon, newWeaponState.currentSubclass);\n                    prevWeaponRef.current = {\n                        weapon: newWeaponState.currentWeapon,\n                        subclass: newWeaponState.currentSubclass\n                    };\n                }\n                stateUpdates.push({\n                    setter: setWeaponState,\n                    value: newWeaponState\n                });\n                // Broadcast animation state changes to other players (throttled to avoid spam)\n                const now = Date.now();\n                if (now - lastAnimationBroadcast.current > 100) {\n                    // Determine if scythe is spinning based on weapon type and charging state\n                    const isScytheSpinning = newWeaponState.currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE && newWeaponState.isCharging;\n                    // Determine if sword is spinning during Divine Storm or Charge\n                    const isSwordSpinning = newWeaponState.isDivineStorming || newWeaponState.isSwordCharging;\n                    // Combine all spinning states\n                    const isSpinning = isScytheSpinning || isSwordSpinning;\n                    // Create the animation state object\n                    const animationStateToSend = {\n                        isCharging: newWeaponState.isCharging,\n                        chargeProgress: newWeaponState.chargeProgress,\n                        isSwinging: newWeaponState.isSwinging,\n                        swordComboStep: newWeaponState.swordComboStep,\n                        isDivineStorming: newWeaponState.isDivineStorming,\n                        isSpinning: isSpinning,\n                        isDeflecting: newWeaponState.isDeflecting,\n                        isSwordCharging: newWeaponState.isSwordCharging,\n                        isViperStingCharging: newWeaponState.isViperStingCharging,\n                        viperStingChargeProgress: newWeaponState.viperStingChargeProgress,\n                        isBarrageCharging: newWeaponState.isBarrageCharging,\n                        barrageChargeProgress: newWeaponState.barrageChargeProgress,\n                        isBackstabbing: newWeaponState.isBackstabbing // Broadcast backstab animation state\n                    };\n                    broadcastPlayerAnimationState(animationStateToSend);\n                    lastAnimationBroadcast.current = now;\n                }\n            }\n            // Update damage numbers from combat system\n            const combatSystem = engineRef.current.getWorld().getSystem(_systems_CombatSystem__WEBPACK_IMPORTED_MODULE_22__.CombatSystem);\n            if (combatSystem && onDamageNumbersUpdate) {\n                onDamageNumbersUpdate(combatSystem.getDamageNumbers());\n            }\n            // Update camera information for damage number positioning\n            if (onCameraUpdate) {\n                onCameraUpdate(camera, size);\n            }\n            // Log object pool and state batcher statistics periodically (every 5 seconds)\n            const now = Date.now();\n            if (now % 10000 < 16) {\n                const poolStats = getPoolStats();\n                const batcherStats = _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.pvpStateBatcher.getStats();\n                console.log(\"\\uD83D\\uDD27 PVP Performance Stats:\", {\n                    objectPool: poolStats,\n                    stateBatcher: batcherStats\n                });\n            }\n            // Update game state for UI\n            if (onGameStateUpdate && playerEntity && controlSystemRef.current) {\n                const healthComponent = playerEntity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                const shieldComponent = playerEntity.getComponent(_ecs_components_Shield__WEBPACK_IMPORTED_MODULE_10__.Shield);\n                if (healthComponent) {\n                    const gameState = {\n                        playerHealth: healthComponent.currentHealth,\n                        maxHealth: healthComponent.maxHealth,\n                        playerShield: shieldComponent ? shieldComponent.currentShield : 0,\n                        maxShield: shieldComponent ? shieldComponent.maxShield : 0,\n                        currentWeapon: controlSystemRef.current.getCurrentWeapon(),\n                        currentSubclass: controlSystemRef.current.getCurrentSubclass(),\n                        // Add mana information for weapons that use mana\n                        mana: currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE || currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.RUNEBLADE ? currentMana : 0,\n                        maxMana: currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.SCYTHE || currentWeapon === _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.RUNEBLADE ? maxMana : 0\n                    };\n                    onGameStateUpdate(gameState);\n                    // Update multiplayer health\n                    updatePlayerHealth(healthComponent.currentHealth, healthComponent.maxHealth);\n                }\n            }\n            // Batch all collected state updates at the end of the frame\n            if (stateUpdates.length > 0) {\n                _utils_PVPStateBatcher__WEBPACK_IMPORTED_MODULE_42__.PVPStateUpdateHelpers.batchGameStateUpdates(stateUpdates);\n            }\n        }\n    });\n    // Expose damage number completion handler for parent component\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        if (onDamageNumberComplete) {\n            // Store the completion handler in a way the parent can access it\n            window.handleDamageNumberComplete = (id)=>{\n                var _engineRef_current;\n                const combatSystem = (_engineRef_current = engineRef.current) === null || _engineRef_current === void 0 ? void 0 : _engineRef_current.getWorld().getSystem(_systems_CombatSystem__WEBPACK_IMPORTED_MODULE_22__.CombatSystem);\n                if (combatSystem) {\n                    combatSystem.removeDamageNumber(id);\n                }\n            };\n        }\n    }, [\n        onDamageNumberComplete\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: !gameStarted ? null : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_environment_Environment__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n                    level: 1,\n                    world: (_engineRef_current = engineRef.current) === null || _engineRef_current === void 0 ? void 0 : _engineRef_current.getWorld()\n                }, void 0, false, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 2499,\n                    columnNumber: 7\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ambientLight\", {\n                    intensity: 0.3\n                }, void 0, false, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 2502,\n                    columnNumber: 7\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"directionalLight\", {\n                    position: [\n                        10,\n                        10,\n                        5\n                    ],\n                    intensity: 0.5,\n                    castShadow: true,\n                    \"shadow-mapSize-width\": 2048,\n                    \"shadow-mapSize-height\": 2048,\n                    \"shadow-camera-far\": 50,\n                    \"shadow-camera-left\": -20,\n                    \"shadow-camera-right\": 20,\n                    \"shadow-camera-top\": 20,\n                    \"shadow-camera-bottom\": -20\n                }, void 0, false, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 2503,\n                    columnNumber: 7\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                    receiveShadow: true,\n                    position: [\n                        0,\n                        -0.5,\n                        0\n                    ],\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"cylinderGeometry\", {\n                            args: [\n                                29,\n                                29,\n                                1,\n                                6\n                            ]\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2518,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meshStandardMaterial\", {\n                            color: \"#2d5a2d\"\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2519,\n                            columnNumber: 9\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 2517,\n                    columnNumber: 7\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"mesh\", {\n                    position: [\n                        0,\n                        0.01,\n                        0\n                    ],\n                    scale: [\n                        2.5,\n                        2.5,\n                        2.5\n                    ],\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ringGeometry\", {\n                            args: [\n                                25,\n                                29,\n                                64\n                            ]\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2524,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meshStandardMaterial\", {\n                            color: \"#ff6b6b\",\n                            transparent: true,\n                            opacity: 0.3\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2525,\n                            columnNumber: 9\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 2523,\n                    columnNumber: 7\n                }, this),\n                (()=>{\n                    return playerEntity && engineRef.current && socket;\n                })() && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_dragon_DragonRenderer__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    entityId: playerEntity.id,\n                    position: playerPosition,\n                    world: engineRef.current.getWorld(),\n                    currentWeapon: weaponState.currentWeapon,\n                    currentSubclass: weaponState.currentSubclass,\n                    isCharging: weaponState.isCharging,\n                    chargeProgress: weaponState.chargeProgress,\n                    isSwinging: weaponState.isSwinging,\n                    isSpinning: weaponState.isSpinning,\n                    swordComboStep: weaponState.swordComboStep,\n                    isDivineStorming: weaponState.isDivineStorming,\n                    isSwordCharging: weaponState.isSwordCharging,\n                    isDeflecting: weaponState.isDeflecting,\n                    isViperStingCharging: weaponState.isViperStingCharging,\n                    viperStingChargeProgress: weaponState.viperStingChargeProgress,\n                    isBarrageCharging: weaponState.isBarrageCharging,\n                    barrageChargeProgress: weaponState.barrageChargeProgress,\n                    isCobraShotCharging: weaponState.isCobraShotCharging,\n                    cobraShotChargeProgress: weaponState.cobraShotChargeProgress,\n                    isSkyfalling: weaponState.isSkyfalling,\n                    isBackstabbing: weaponState.isBackstabbing,\n                    isSundering: weaponState.isSundering,\n                    isSmiting: ((_controlSystemRef_current = controlSystemRef.current) === null || _controlSystemRef_current === void 0 ? void 0 : _controlSystemRef_current.isSmiteActive()) || false,\n                    isDeathGrasping: ((_controlSystemRef_current1 = controlSystemRef.current) === null || _controlSystemRef_current1 === void 0 ? void 0 : _controlSystemRef_current1.isDeathGraspActive()) || false,\n                    reanimateRef: reanimateRef,\n                    isLocalPlayer: true,\n                    onBowRelease: ()=>{\n                    // This callback is now handled by the ControlSystem directly\n                    },\n                    onScytheSwingComplete: ()=>{\n                        const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                        camera.getWorldDirection(direction);\n                        direction.normalize();\n                        broadcastPlayerAttack(\"scythe_swing\", playerPosition, direction, {\n                            isSpinning: true\n                        });\n                    },\n                    onSwordSwingComplete: ()=>{\n                        var _controlSystemRef_current;\n                        (_controlSystemRef_current = controlSystemRef.current) === null || _controlSystemRef_current === void 0 ? void 0 : _controlSystemRef_current.onSwordSwingComplete();\n                        const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                        camera.getWorldDirection(direction);\n                        direction.normalize();\n                        broadcastPlayerAttack(\"sword_swing\", playerPosition, direction, {\n                            comboStep: weaponState.swordComboStep\n                        });\n                    },\n                    onSabresSwingComplete: ()=>{\n                        var _controlSystemRef_current;\n                        (_controlSystemRef_current = controlSystemRef.current) === null || _controlSystemRef_current === void 0 ? void 0 : _controlSystemRef_current.onSabresSwingComplete();\n                        const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                        camera.getWorldDirection(direction);\n                        direction.normalize();\n                        broadcastPlayerAttack(\"sabres_swing\", playerPosition, direction);\n                    },\n                    onChargeComplete: ()=>{\n                        var _controlSystemRef_current;\n                        (_controlSystemRef_current = controlSystemRef.current) === null || _controlSystemRef_current === void 0 ? void 0 : _controlSystemRef_current.onChargeComplete();\n                        // Broadcast charge spin animation\n                        const direction = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n                        camera.getWorldDirection(direction);\n                        direction.normalize();\n                        broadcastPlayerAttack(\"sword_charge_spin\", playerPosition, direction, {\n                            isSpinning: true\n                        });\n                    },\n                    onDeflectComplete: ()=>{\n                        var _controlSystemRef_current;\n                        (_controlSystemRef_current = controlSystemRef.current) === null || _controlSystemRef_current === void 0 ? void 0 : _controlSystemRef_current.onDeflectComplete();\n                    },\n                    onBackstabComplete: ()=>{\n                    // Backstab animation completed - no need to broadcast as animation state is handled automatically\n                    },\n                    onSunderComplete: ()=>{\n                    // Sunder animation completed - no need to broadcast as animation state is handled automatically\n                    },\n                    onSmiteComplete: ()=>{\n                        var _controlSystemRef_current;\n                        (_controlSystemRef_current = controlSystemRef.current) === null || _controlSystemRef_current === void 0 ? void 0 : _controlSystemRef_current.onSmiteComplete();\n                    },\n                    onDeathGraspComplete: ()=>{\n                        var _controlSystemRef_current;\n                        (_controlSystemRef_current = controlSystemRef.current) === null || _controlSystemRef_current === void 0 ? void 0 : _controlSystemRef_current.onDeathGraspComplete();\n                    }\n                }, void 0, false, {\n                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                    lineNumber: 2538,\n                    columnNumber: 9\n                }, this),\n                Array.from(players.values()).map((player)=>{\n                    var _engineRef_current;\n                    if (player.id === (socket === null || socket === void 0 ? void 0 : socket.id)) return null; // Don't render our own player twice\n                    const playerState = multiplayerPlayerStates.get(player.id) || {\n                        isCharging: false,\n                        chargeProgress: 0,\n                        isSwinging: false,\n                        swordComboStep: 1,\n                        isDivineStorming: false,\n                        isSpinning: false,\n                        isSwordCharging: false,\n                        isDeflecting: false,\n                        isViperStingCharging: false,\n                        viperStingChargeProgress: 0,\n                        isBarrageCharging: false,\n                        barrageChargeProgress: 0,\n                        isCobraShotCharging: false,\n                        cobraShotChargeProgress: 0,\n                        isSkyfalling: false,\n                        isBackstabbing: false\n                    };\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_dragon_DragonRenderer__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                        entityId: parseInt(player.id.replace(/\\D/g, \"0\")),\n                        position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(player.position.x, player.position.y, player.position.z),\n                        world: ((_engineRef_current = engineRef.current) === null || _engineRef_current === void 0 ? void 0 : _engineRef_current.getWorld()) || new _ecs_World__WEBPACK_IMPORTED_MODULE_6__.World(),\n                        currentWeapon: player.weapon,\n                        currentSubclass: player.subclass,\n                        isCharging: playerState.isCharging,\n                        chargeProgress: playerState.chargeProgress,\n                        isSwinging: playerState.isSwinging,\n                        isSpinning: playerState.isSpinning,\n                        swordComboStep: playerState.swordComboStep,\n                        isDivineStorming: playerState.isDivineStorming,\n                        isSwordCharging: playerState.isSwordCharging,\n                        isDeflecting: playerState.isDeflecting,\n                        isViperStingCharging: playerState.isViperStingCharging,\n                        viperStingChargeProgress: playerState.viperStingChargeProgress,\n                        isBarrageCharging: playerState.isBarrageCharging,\n                        barrageChargeProgress: playerState.barrageChargeProgress,\n                        isCobraShotCharging: playerState.isCobraShotCharging,\n                        cobraShotChargeProgress: playerState.cobraShotChargeProgress,\n                        isSkyfalling: playerState.isSkyfalling,\n                        isBackstabbing: playerState.isBackstabbing,\n                        rotation: player.rotation,\n                        isLocalPlayer: false,\n                        onBowRelease: ()=>{},\n                        onScytheSwingComplete: ()=>{},\n                        onSwordSwingComplete: ()=>{}\n                    }, player.id, false, {\n                        fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                        lineNumber: 2644,\n                        columnNumber: 11\n                    }, this);\n                }),\n                Array.from(towers.values()).map((tower)=>{\n                    var _engineRef_current;\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_towers_TowerRenderer__WEBPACK_IMPORTED_MODULE_46__[\"default\"], {\n                        entityId: parseInt(tower.id.replace(/\\D/g, \"0\")),\n                        world: ((_engineRef_current = engineRef.current) === null || _engineRef_current === void 0 ? void 0 : _engineRef_current.getWorld()) || new _ecs_World__WEBPACK_IMPORTED_MODULE_6__.World(),\n                        position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(tower.position.x, tower.position.y, tower.position.z),\n                        ownerId: tower.ownerId,\n                        towerIndex: tower.towerIndex,\n                        health: tower.health,\n                        maxHealth: tower.maxHealth,\n                        isDead: tower.isDead,\n                        camera: camera\n                    }, tower.id, false, {\n                        fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                        lineNumber: 2679,\n                        columnNumber: 11\n                    }, this);\n                }),\n                engineRef.current && (()=>{\n                    const world = engineRef.current.getWorld();\n                    const summonedUnits = world.queryEntities([\n                        _ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform,\n                        _ecs_components_SummonedUnit__WEBPACK_IMPORTED_MODULE_14__.SummonedUnit,\n                        _ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health\n                    ]);\n                    return summonedUnits.map((entity)=>{\n                        const transform = entity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                        const unit = entity.getComponent(_ecs_components_SummonedUnit__WEBPACK_IMPORTED_MODULE_14__.SummonedUnit);\n                        const health = entity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                        if (!transform || !unit || !health || unit.isDead || health.isDead) {\n                            return null;\n                        }\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SummonedUnitRenderer__WEBPACK_IMPORTED_MODULE_47__[\"default\"], {\n                            entityId: entity.id,\n                            world: world,\n                            position: transform.position,\n                            ownerId: unit.ownerId,\n                            health: health.currentHealth,\n                            maxHealth: unit.maxHealth,\n                            isDead: unit.isDead\n                        }, unit.unitId, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2709,\n                            columnNumber: 13\n                        }, this);\n                    }).filter(Boolean); // Remove null entries\n                })(),\n                Array.from(players.values()).map((player)=>{\n                    if (player.id === (socket === null || socket === void 0 ? void 0 : socket.id)) return null; // Don't show health bar for local player\n                    // Get shield info from the server player entity if it exists\n                    const serverPlayerEntityId = serverPlayerEntities.current.get(player.id);\n                    let shieldAmount = 0;\n                    let maxShieldAmount = 200;\n                    if (serverPlayerEntityId && engineRef.current) {\n                        const entity = engineRef.current.getWorld().getEntity(serverPlayerEntityId);\n                        if (entity) {\n                            const shield = entity.getComponent(_ecs_components_Shield__WEBPACK_IMPORTED_MODULE_10__.Shield);\n                            if (shield) {\n                                shieldAmount = shield.currentShield;\n                                maxShieldAmount = shield.maxShield;\n                            }\n                        }\n                    }\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_PlayerHealthBar__WEBPACK_IMPORTED_MODULE_45__[\"default\"], {\n                        playerId: player.id,\n                        playerName: player.name,\n                        position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(player.position.x, player.position.y, player.position.z),\n                        health: player.health,\n                        maxHealth: player.maxHealth,\n                        shield: shieldAmount,\n                        maxShield: maxShieldAmount,\n                        camera: camera,\n                        showDistance: 35\n                    }, \"healthbar-\".concat(player.id), false, {\n                        fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                        lineNumber: 2744,\n                        columnNumber: 11\n                    }, this);\n                }),\n                engineRef.current && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_managers_UnifiedProjectileManager__WEBPACK_IMPORTED_MODULE_30__[\"default\"], {\n                            world: engineRef.current.getWorld()\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2762,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_projectiles_BowPowershotManager__WEBPACK_IMPORTED_MODULE_31__[\"default\"], {}, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2763,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_FrostNovaManager__WEBPACK_IMPORTED_MODULE_32__[\"default\"], {\n                            world: engineRef.current.getWorld()\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2764,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_StunManager__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n                            world: engineRef.current.getWorld()\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2765,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_projectiles_CobraShotManager__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n                            world: engineRef.current.getWorld()\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2766,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_DivineStormManager__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n                            enemyData: Array.from(players.values()).filter((p)=>p.id !== (socket === null || socket === void 0 ? void 0 : socket.id)).map((p)=>({\n                                    id: p.id,\n                                    position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.position.x, p.position.y, p.position.z),\n                                    health: p.health\n                                })),\n                            onHitTarget: (targetId, damage)=>{\n                                if (broadcastPlayerDamage) {\n                                    broadcastPlayerDamage(targetId, damage);\n                                }\n                            },\n                            playerId: socket === null || socket === void 0 ? void 0 : socket.id\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2767,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_DeflectShieldManager__WEBPACK_IMPORTED_MODULE_44__[\"default\"], {}, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2780,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_pvp_OptimizedPVPManagers__WEBPACK_IMPORTED_MODULE_40__.OptimizedPVPCobraShotManager, {\n                            world: engineRef.current.getWorld(),\n                            players: Array.from(players.values()),\n                            serverPlayerEntities: serverPlayerEntities,\n                            localSocketId: socket === null || socket === void 0 ? void 0 : socket.id,\n                            onPlayerHit: (playerId, damage)=>{\n                                // CRITICAL FIX: Never damage the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Cobra Shot damage to local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                if (broadcastPlayerDamage) {\n                                    console.log(\"\\uD83C\\uDFAF Broadcasting Cobra Shot damage to player \".concat(playerId, \" (NOT local player \").concat(socket === null || socket === void 0 ? void 0 : socket.id, \")\"));\n                                    broadcastPlayerDamage(playerId, damage);\n                                }\n                            },\n                            onPlayerVenomed: (playerId, position)=>{\n                                // CRITICAL FIX: Never apply venom effect to the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Cobra Shot venom effect on local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                // Clone the position since it comes from the pool and will be released\n                                const clonedPosition = position.clone();\n                                createPvpVenomEffect(playerId, clonedPosition);\n                                // Broadcast venom effect to all players so they can see it\n                                if (broadcastPlayerEffect) {\n                                    console.log(\"\\uD83C\\uDFAF Broadcasting Cobra Shot venom effect to player \".concat(playerId, \" (NOT local player \").concat(socket === null || socket === void 0 ? void 0 : socket.id, \")\"));\n                                    broadcastPlayerEffect({\n                                        type: \"venom\",\n                                        targetPlayerId: playerId,\n                                        position: {\n                                            x: clonedPosition.x,\n                                            y: clonedPosition.y,\n                                            z: clonedPosition.z\n                                        },\n                                        duration: 6000\n                                    });\n                                }\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2782,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_pvp_OptimizedPVPManagers__WEBPACK_IMPORTED_MODULE_40__.OptimizedPVPBarrageManager, {\n                            world: engineRef.current.getWorld(),\n                            players: Array.from(players.values()),\n                            serverPlayerEntities: serverPlayerEntities,\n                            localSocketId: socket === null || socket === void 0 ? void 0 : socket.id,\n                            onPlayerHit: (playerId, damage)=>{\n                                // CRITICAL FIX: Never damage the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Barrage damage to local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                if (broadcastPlayerDamage) {\n                                    console.log(\"\\uD83C\\uDFAF Broadcasting Barrage damage to player \".concat(playerId, \" (NOT local player \").concat(socket === null || socket === void 0 ? void 0 : socket.id, \")\"));\n                                    broadcastPlayerDamage(playerId, damage);\n                                }\n                            },\n                            onPlayerSlowed: (playerId, position)=>{\n                                // CRITICAL FIX: Never apply slow effect to the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Barrage slow effect on local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                // Clone the position since it comes from the pool and will be released\n                                const clonedPosition = position.clone();\n                                createPvpDebuffEffect(playerId, \"slowed\", clonedPosition, 5000); // 5 second slow\n                                // Broadcast debuff effect to all players so they can see it\n                                if (broadcastPlayerDebuff) {\n                                    console.log(\"\\uD83C\\uDFAF Broadcasting Barrage slow effect to player \".concat(playerId, \" (NOT local player \").concat(socket === null || socket === void 0 ? void 0 : socket.id, \")\"));\n                                    broadcastPlayerDebuff(playerId, \"slowed\", 5000, {\n                                        position: {\n                                            x: clonedPosition.x,\n                                            y: clonedPosition.y,\n                                            z: clonedPosition.z\n                                        },\n                                        speedMultiplier: 0.5\n                                    });\n                                }\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2824,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_pvp_OptimizedPVPManagers__WEBPACK_IMPORTED_MODULE_40__.OptimizedPVPFrostNovaManager, {\n                            world: engineRef.current.getWorld(),\n                            players: Array.from(players.values()),\n                            serverPlayerEntities: serverPlayerEntities,\n                            localSocketId: socket === null || socket === void 0 ? void 0 : socket.id,\n                            onPlayerHit: (playerId, damage)=>{\n                                // CRITICAL FIX: Never damage the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Frost Nova damage to local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                if (broadcastPlayerDamage) {\n                                    console.log(\"\\uD83C\\uDFAF Broadcasting Frost Nova damage to player \".concat(playerId, \" (NOT local player \").concat(socket === null || socket === void 0 ? void 0 : socket.id, \")\"));\n                                    broadcastPlayerDamage(playerId, damage);\n                                }\n                            },\n                            onPlayerFrozen: (playerId, position)=>{\n                                // CRITICAL FIX: Never apply frozen effect to the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Frost Nova frozen effect on local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                // Clone the position since it comes from the pool and will be released\n                                const clonedPosition = position.clone();\n                                createPvpFrozenEffect(playerId, clonedPosition);\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2864,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_pvp_OptimizedPVPManagers__WEBPACK_IMPORTED_MODULE_40__.OptimizedPVPViperStingManager, {\n                            world: engineRef.current.getWorld(),\n                            players: Array.from(players.values()),\n                            serverPlayerEntities: serverPlayerEntities,\n                            localSocketId: socket === null || socket === void 0 ? void 0 : socket.id,\n                            onPlayerHit: (playerId, damage)=>{\n                                // CRITICAL FIX: Never damage the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Viper Sting damage to local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                if (broadcastPlayerDamage) {\n                                    console.log(\"\\uD83C\\uDFAF Broadcasting Viper Sting damage to player \".concat(playerId, \" (NOT local player \").concat(socket === null || socket === void 0 ? void 0 : socket.id, \")\"));\n                                    broadcastPlayerDamage(playerId, damage);\n                                }\n                            },\n                            onPlayerVenomed: (playerId, position)=>{\n                                // CRITICAL FIX: Never apply venom effect to the local player\n                                if (playerId === (socket === null || socket === void 0 ? void 0 : socket.id)) {\n                                    console.log(\"⚠️ Skipping Viper Sting venom effect on local player \".concat(socket === null || socket === void 0 ? void 0 : socket.id));\n                                    return;\n                                }\n                                // Clone the position since it comes from the pool and will be released\n                                const clonedPosition = position.clone();\n                                createPvpVenomEffect(playerId, clonedPosition);\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                            lineNumber: 2894,\n                            columnNumber: 11\n                        }, this),\n                        pvpReanimateEffects.map((reanimateEffect)=>{\n                            // Find the current position of the affected player\n                            const affectedPlayer = players.get(reanimateEffect.playerId);\n                            const currentPosition = affectedPlayer ? new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(affectedPlayer.position.x, affectedPlayer.position.y, affectedPlayer.position.z) : reanimateEffect.position;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PVPReanimateEffect, {\n                                position: currentPosition,\n                                onComplete: ()=>{\n                                    setPvpReanimateEffects((prev)=>prev.filter((effect)=>effect.id !== reanimateEffect.id));\n                                }\n                            }, reanimateEffect.id, false, {\n                                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                lineNumber: 2933,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        pvpSmiteEffects.map((smiteEffect)=>{\n                            // Create enemy data from other players for PVP smite damage\n                            const otherPlayersData = Array.from(players.entries()).filter((param)=>{\n                                let [playerId] = param;\n                                return playerId !== smiteEffect.playerId;\n                            }).map((param)=>{\n                                let [playerId, player] = param;\n                                return {\n                                    id: playerId,\n                                    position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(player.position.x, player.position.y, player.position.z),\n                                    health: player.health\n                                };\n                            });\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_Smite__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n                                weaponType: _components_dragon_weapons__WEBPACK_IMPORTED_MODULE_26__.WeaponType.RUNEBLADE,\n                                position: smiteEffect.position,\n                                onComplete: ()=>{\n                                    setPvpSmiteEffects((prev)=>prev.filter((effect)=>effect.id !== smiteEffect.id));\n                                },\n                                onHit: (targetId, damage)=>{\n                                    // Handle PVP damage through broadcast system\n                                    broadcastPlayerDamage(targetId, damage, \"smite\");\n                                },\n                                enemyData: otherPlayersData,\n                                onDamageDealt: smiteEffect.onDamageDealt || ((damageDealt)=>{\n                                    // Fallback healing if no callback provided\n                                    if (damageDealt && playerEntity) {\n                                        const healthComponent = playerEntity.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health);\n                                        if (healthComponent) {\n                                            const oldHealth = healthComponent.currentHealth;\n                                            const didHeal = healthComponent.heal(20); // Smite healing amount\n                                            if (didHeal) {\n                                                console.log(\"⚡ Smite (PVP visual fallback) healed player for 20 HP! Health: \".concat(oldHealth, \" -> \").concat(healthComponent.currentHealth, \"/\").concat(healthComponent.maxHealth));\n                                            }\n                                        }\n                                    }\n                                })\n                            }, smiteEffect.id, false, {\n                                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                lineNumber: 2955,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        pvpDeathGraspEffects.map((deathGraspEffect)=>{\n                            // For local player, use current transform position instead of potentially stale players map position\n                            let currentStartPosition;\n                            if (deathGraspEffect.playerId === (socket === null || socket === void 0 ? void 0 : socket.id) && playerEntity) {\n                                // Local player - use current ECS position\n                                const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                                if (transform) {\n                                    currentStartPosition = transform.position.clone();\n                                } else {\n                                    // Fallback to players map if ECS position unavailable\n                                    const castingPlayer = players.get(deathGraspEffect.playerId);\n                                    currentStartPosition = castingPlayer ? new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(castingPlayer.position.x, castingPlayer.position.y, castingPlayer.position.z) : deathGraspEffect.startPosition;\n                                }\n                            } else {\n                                // Remote player - use players map position\n                                const castingPlayer = players.get(deathGraspEffect.playerId);\n                                currentStartPosition = castingPlayer ? new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(castingPlayer.position.x, castingPlayer.position.y, castingPlayer.position.z) : deathGraspEffect.startPosition;\n                            }\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_DeathGraspProjectile__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n                                startPosition: currentStartPosition,\n                                direction: deathGraspEffect.direction,\n                                casterId: deathGraspEffect.playerId,\n                                onHit: (targetId, position)=>{\n                                    console.log(\"\\uD83C\\uDFAF DeathGrasp hit target: \".concat(targetId, \" at position:\"), position);\n                                    console.log(\"\\uD83C\\uDFAF DeathGrasp caster position:\", currentStartPosition);\n                                    console.log(\"\\uD83C\\uDFAF DeathGrasp creating pull effect for target \".concat(targetId));\n                                    // Create the pulling effect when projectile hits\n                                    createPvpDeathGraspPull(targetId, currentStartPosition);\n                                },\n                                onComplete: ()=>{\n                                    setPvpDeathGraspEffects((prev)=>prev.filter((effect)=>effect.id !== deathGraspEffect.id));\n                                },\n                                players: players,\n                                localSocketId: socket === null || socket === void 0 ? void 0 : socket.id\n                            }, deathGraspEffect.id, false, {\n                                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                lineNumber: 3010,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        pvpDeathGraspPulls.map((pull)=>{\n                            if (!pull.isActive) return null;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_DeathGraspPull__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n                                targetPlayerId: pull.targetPlayerId,\n                                casterPosition: pull.casterPosition,\n                                isActive: pull.isActive,\n                                onComplete: ()=>{\n                                    setPvpDeathGraspPulls((prev)=>prev.map((p)=>p.id === pull.id ? {\n                                                ...p,\n                                                isActive: false\n                                            } : p));\n                                },\n                                playerEntities: serverPlayerEntities,\n                                getEntityPosition: (entityId)=>{\n                                    var _engineRef_current;\n                                    const world = (_engineRef_current = engineRef.current) === null || _engineRef_current === void 0 ? void 0 : _engineRef_current.getWorld();\n                                    if (!world) return null;\n                                    const entity = world.getEntity(entityId);\n                                    if (!entity) return null;\n                                    const transform = entity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                                    return transform ? transform.position : null;\n                                },\n                                updateEntityPosition: (entityId, position)=>{\n                                    var _engineRef_current;\n                                    const world = (_engineRef_current = engineRef.current) === null || _engineRef_current === void 0 ? void 0 : _engineRef_current.getWorld();\n                                    if (!world) return;\n                                    const entity = world.getEntity(entityId);\n                                    if (!entity) return;\n                                    const transform = entity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                                    if (transform) {\n                                        transform.setPosition(position.x, position.y, position.z);\n                                    }\n                                }\n                            }, pull.id, false, {\n                                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                lineNumber: 3036,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        pvpFrostNovaEffects.map((frostNovaEffect)=>{\n                            // Find the current position of the casting player\n                            const castingPlayer = players.get(frostNovaEffect.playerId);\n                            const currentPosition = castingPlayer ? new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(castingPlayer.position.x, castingPlayer.position.y, castingPlayer.position.z) : frostNovaEffect.position;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_FrostNova__WEBPACK_IMPORTED_MODULE_34__[\"default\"], {\n                                position: currentPosition,\n                                duration: frostNovaEffect.duration,\n                                startTime: frostNovaEffect.startTime,\n                                onComplete: ()=>{\n                                    setPvpFrostNovaEffects((prev)=>prev.filter((effect)=>effect.id !== frostNovaEffect.id));\n                                }\n                            }, frostNovaEffect.id, false, {\n                                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                lineNumber: 3082,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        pvpVenomEffects.map((venomEffect)=>{\n                            // Find the current position of the affected player\n                            const affectedPlayer = players.get(venomEffect.playerId);\n                            const currentPosition = affectedPlayer ? new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(affectedPlayer.position.x, affectedPlayer.position.y, affectedPlayer.position.z) : venomEffect.position;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_projectiles_VenomEffect__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n                                position: currentPosition,\n                                duration: venomEffect.duration,\n                                startTime: venomEffect.startTime,\n                                enemyId: venomEffect.playerId,\n                                enemyData: Array.from(players.values()).filter((p)=>p.id !== (socket === null || socket === void 0 ? void 0 : socket.id)).map((p)=>({\n                                        id: p.id,\n                                        position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.position.x, p.position.y, p.position.z),\n                                        health: p.health,\n                                        isDying: false\n                                    })),\n                                onComplete: ()=>{\n                                    setPvpVenomEffects((prev)=>prev.filter((effect)=>effect.id !== venomEffect.id));\n                                }\n                            }, venomEffect.id, false, {\n                                fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                lineNumber: 3103,\n                                columnNumber: 15\n                            }, this);\n                        }),\n                        pvpDebuffEffects.map((debuffEffect)=>{\n                            // Find the current position of the affected player\n                            const affectedPlayer = players.get(debuffEffect.playerId);\n                            let currentPosition;\n                            // Special handling for local player to use the most up-to-date position\n                            if (debuffEffect.playerId === (socket === null || socket === void 0 ? void 0 : socket.id) && playerEntity) {\n                                const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                                if (transform) {\n                                    currentPosition = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(transform.position.x, transform.position.y + 0.5, transform.position.z);\n                                } else {\n                                    currentPosition = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(playerPosition.x, playerPosition.y + 0.5, playerPosition.z);\n                                }\n                            } else if (affectedPlayer) {\n                                currentPosition = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(affectedPlayer.position.x, affectedPlayer.position.y + 0.5, affectedPlayer.position.z);\n                            } else {\n                                currentPosition = new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(debuffEffect.position.x, debuffEffect.position.y + 0.5, debuffEffect.position.z);\n                            }\n                            // Use different effects for different debuff types\n                            if (debuffEffect.debuffType === \"frozen\") {\n                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_FrozenEffect__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n                                    position: currentPosition,\n                                    duration: debuffEffect.duration,\n                                    startTime: debuffEffect.startTime,\n                                    enemyId: debuffEffect.playerId,\n                                    enemyData: Array.from(players.values()).filter((p)=>p.id !== (socket === null || socket === void 0 ? void 0 : socket.id)).map((p)=>{\n                                        // For local player, use the most current position\n                                        if (p.id === (socket === null || socket === void 0 ? void 0 : socket.id) && playerEntity) {\n                                            const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                                            const currentPos = transform ? transform.position : playerPosition;\n                                            return {\n                                                id: p.id,\n                                                position: currentPos.clone(),\n                                                health: p.health,\n                                                isDying: false\n                                            };\n                                        } else {\n                                            return {\n                                                id: p.id,\n                                                position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.position.x, p.position.y, p.position.z),\n                                                health: p.health,\n                                                isDying: false\n                                            };\n                                        }\n                                    }),\n                                    onComplete: ()=>{\n                                        setPvpDebuffEffects((prev)=>prev.filter((effect)=>effect.id !== debuffEffect.id));\n                                    }\n                                }, debuffEffect.id, false, {\n                                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                    lineNumber: 3145,\n                                    columnNumber: 17\n                                }, this);\n                            } else if (debuffEffect.debuffType === \"stunned\") {\n                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_weapons_StunnedEffect__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n                                    position: currentPosition,\n                                    duration: debuffEffect.duration,\n                                    startTime: debuffEffect.startTime,\n                                    enemyId: debuffEffect.playerId,\n                                    enemyData: Array.from(players.values()).filter((p)=>p.id !== (socket === null || socket === void 0 ? void 0 : socket.id)).map((p)=>{\n                                        // For local player, use the most current position\n                                        if (p.id === (socket === null || socket === void 0 ? void 0 : socket.id) && playerEntity) {\n                                            const transform = playerEntity.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n                                            const currentPos = transform ? transform.position : playerPosition;\n                                            return {\n                                                id: p.id,\n                                                position: currentPos.clone(),\n                                                health: p.health,\n                                                isDying: false\n                                            };\n                                        } else {\n                                            return {\n                                                id: p.id,\n                                                position: new _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.Vector3(p.position.x, p.position.y, p.position.z),\n                                                health: p.health,\n                                                isDying: false\n                                            };\n                                        }\n                                    }),\n                                    onComplete: ()=>{\n                                        setPvpDebuffEffects((prev)=>prev.filter((effect)=>effect.id !== debuffEffect.id));\n                                    }\n                                }, debuffEffect.id, false, {\n                                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                    lineNumber: 3178,\n                                    columnNumber: 17\n                                }, this);\n                            } else {\n                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ui_DebuffIndicator__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n                                    position: currentPosition,\n                                    debuffType: debuffEffect.debuffType,\n                                    duration: debuffEffect.duration,\n                                    startTime: debuffEffect.startTime,\n                                    onComplete: ()=>{\n                                        setPvpDebuffEffects((prev)=>prev.filter((effect)=>effect.id !== debuffEffect.id));\n                                    }\n                                }, debuffEffect.id, false, {\n                                    fileName: \"/Users/ridwan/Desktop/Nocturne/src/components/PVPGameScene.tsx\",\n                                    lineNumber: 3211,\n                                    columnNumber: 17\n                                }, this);\n                            }\n                        })\n                    ]\n                }, void 0, true)\n            ]\n        }, void 0, true)\n    }, void 0, false);\n}\n_s1(PVPGameScene, \"NMrxfEmxDiEpNx6eHNYy2nidlTo=\", false, function() {\n    return [\n        _barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_54__.D,\n        _contexts_MultiplayerContext__WEBPACK_IMPORTED_MODULE_4__.useMultiplayer,\n        _components_projectiles_useBowPowershot__WEBPACK_IMPORTED_MODULE_50__.useBowPowershot,\n        _components_pvp_OptimizedPVPManagers__WEBPACK_IMPORTED_MODULE_40__.useOptimizedPVPEffects,\n        _barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_54__.F\n    ];\n});\n_c1 = PVPGameScene;\nfunction setupPVPGame(engine, scene, camera, renderer, damagePlayerCallback, damageTowerCallback) {\n    const world = engine.getWorld();\n    const inputManager = engine.getInputManager();\n    // Enable shadows\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = _utils_three_exports__WEBPACK_IMPORTED_MODULE_2__.PCFSoftShadowMap;\n    // Create systems\n    const physicsSystem = new _systems_PhysicsSystem__WEBPACK_IMPORTED_MODULE_20__.PhysicsSystem();\n    const collisionSystem = new _systems_CollisionSystem__WEBPACK_IMPORTED_MODULE_21__.CollisionSystem(5); // 5 unit cell size for spatial hash\n    const combatSystem = new _systems_CombatSystem__WEBPACK_IMPORTED_MODULE_22__.CombatSystem(world);\n    const renderSystem = new _systems_RenderSystem__WEBPACK_IMPORTED_MODULE_16__.RenderSystem(scene, camera, renderer);\n    const projectileSystem = new _systems_ProjectileSystem__WEBPACK_IMPORTED_MODULE_19__.ProjectileSystem(world);\n    const towerSystem = new _systems_TowerSystem__WEBPACK_IMPORTED_MODULE_23__.TowerSystem(world);\n    const summonedUnitSystem = new _systems_SummonedUnitSystem__WEBPACK_IMPORTED_MODULE_24__.SummonedUnitSystem(world);\n    const controlSystem = new _systems_ControlSystem__WEBPACK_IMPORTED_MODULE_17__.ControlSystem(camera, inputManager, world, projectileSystem);\n    const cameraSystem = new _systems_CameraSystem__WEBPACK_IMPORTED_MODULE_18__.CameraSystem(camera, inputManager, {\n        distance: 8,\n        height: 2,\n        mouseSensitivity: 0.005,\n        smoothing: 0.15\n    });\n    const interpolationSystem = new _systems_InterpolationSystem__WEBPACK_IMPORTED_MODULE_25__.InterpolationSystem();\n    // Connect systems\n    projectileSystem.setCombatSystem(combatSystem);\n    towerSystem.setProjectileSystem(projectileSystem);\n    summonedUnitSystem.setCombatSystem(combatSystem);\n    // Set up combat system to route player damage through PVP system\n    combatSystem.setPlayerDamageCallback(damagePlayerCallback);\n    // Set up tower system callback for tower damage\n    // TODO: Implement tower damage callback mapping similar to player damage\n    // Add systems to world (order matters for dependencies)\n    world.addSystem(physicsSystem);\n    world.addSystem(collisionSystem);\n    world.addSystem(combatSystem);\n    world.addSystem(interpolationSystem); // Add interpolation system before render system\n    world.addSystem(renderSystem);\n    world.addSystem(projectileSystem);\n    world.addSystem(towerSystem);\n    world.addSystem(summonedUnitSystem);\n    world.addSystem(controlSystem);\n    world.addSystem(cameraSystem);\n    // Create player entity\n    const playerEntity = createPVPPlayer(world);\n    // Set player for control system and camera system\n    controlSystem.setPlayer(playerEntity);\n    cameraSystem.setTarget(playerEntity);\n    cameraSystem.snapToTarget();\n    console.log(\"\\uD83C\\uDF0D Total entities in PVP world:\", world.getAllEntities().length);\n    console.log(\"\\uD83D\\uDC64 Player entity created with ID: \".concat(playerEntity.id));\n    return {\n        player: playerEntity,\n        controlSystem,\n        towerSystem,\n        summonedUnitSystem\n    };\n}\nfunction createPVPPlayer(world) {\n    // Create player entity\n    const player = world.createEntity();\n    // Add Transform component\n    const transform = world.createComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform);\n    transform.setPosition(0, 0.5, 0); // Position sphere center at radius height above ground\n    player.addComponent(transform);\n    // NOTE: Local players do NOT get interpolation buffers\n    // Only remote players use interpolation for smooth movement\n    // Add Movement component\n    const movement = world.createComponent(_ecs_components_Movement__WEBPACK_IMPORTED_MODULE_8__.Movement);\n    movement.maxSpeed = 3.75; // Reduced from 8 to 3.65 for slower movement\n    movement.jumpForce = 8;\n    movement.friction = 0.85;\n    player.addComponent(movement);\n    // Add Health component with level-based max health\n    const maxHealth = _utils_ExperienceSystem__WEBPACK_IMPORTED_MODULE_53__.ExperienceSystem.getMaxHealthForLevel(1); // Start at level 1\n    const health = new _ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health(maxHealth);\n    health.enableRegeneration(2, 5); // Slower regen in PVP: 1 HP per second after 10 seconds\n    player.addComponent(health);\n    // Add Shield component with 100 max shield\n    const shield = new _ecs_components_Shield__WEBPACK_IMPORTED_MODULE_10__.Shield(250, 20, 2); // 100 max shield, 20/s regen, 5s delay\n    player.addComponent(shield);\n    // Add Collider component for environment collision and PVP damage detection\n    const collider = world.createComponent(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.Collider);\n    collider.type = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.ColliderType.SPHERE;\n    collider.radius = 1.2; // Reduced collision radius for better player proximity in PVP\n    collider.layer = _ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.CollisionLayer.PLAYER; // Use player layer for local player\n    // Set collision mask to collide with environment only - NO player-to-player collision in PVP\n    collider.setMask(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.CollisionLayer.ENVIRONMENT);\n    collider.setOffset(0, 0.5, 0); // Center on player\n    player.addComponent(collider);\n    console.log(\"\\uD83D\\uDC64 PVP player entity created with components:\", {\n        transform: !!player.getComponent(_ecs_components_Transform__WEBPACK_IMPORTED_MODULE_7__.Transform),\n        movement: !!player.getComponent(_ecs_components_Movement__WEBPACK_IMPORTED_MODULE_8__.Movement),\n        health: !!player.getComponent(_ecs_components_Health__WEBPACK_IMPORTED_MODULE_9__.Health),\n        shield: !!player.getComponent(_ecs_components_Shield__WEBPACK_IMPORTED_MODULE_10__.Shield),\n        collider: !!player.getComponent(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.Collider)\n    });\n    const localCollider = player.getComponent(_ecs_components_Collider__WEBPACK_IMPORTED_MODULE_12__.Collider);\n    return player;\n}\nfunction updateFPSCounter(fps) {\n    const fpsElement = document.getElementById(\"fps-counter\");\n    if (fpsElement) {\n        fpsElement.textContent = \"FPS: \".concat(fps);\n    }\n}\nvar _c, _c1;\n$RefreshReg$(_c, \"PVPReanimateEffect\");\n$RefreshReg$(_c1, \"PVPGameScene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/PVPGameScene.tsx\n"));

/***/ })

});